{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Building Inclusive Open Source Software","text":""},{"location":"#it-all-started-with-a-statement","title":"It all started with a statement:","text":"<p>Despite being deeply based on values of sharing and empowerment, Free and Open Source Software (FOSS) often lack inclusiveness and accessibility.</p> <p>This project aims at providing accessibility and inclusiveness knowledge for organizations and individuals who build open-source software.</p> <p>This training contains short modules (ranging from 10 to 30 minutes), which can either be dispensed to teams as workshops, or individually read as articles. They cover a wide range of subjects, from conceptual and historical background on accessibility and inclusiveness, to concrete design and programming guidelines.</p> <p>These modules should not be seen as holding the truth regarding the subjects tackled, but rather as a condensed introduction which goal is to help teams get started with accessibility and inclusiveness for their product.</p> Navigating through the modulesWhere does it come from?ContributingUsing this project's contentDisclaimer <p> Click the image to view and zoom in full size. </p> <p>Please note that these instructions are only recommendations based on our pedagogic intentions. Feel free to navigate the training however suits you!</p> <p>This project started out as we - Page Magnier--Slimani (Jami/Savoir-Faire Linux) and Maxence Vahedi (Olvid) - struggled with the lack of awareness and specific resources on accessible and inclusive applicative development. We therefore began this collaborative project, which goal is to provide accessibility and inclusiveness resources to our teams and to the FOSS community.</p> <p>Please note that we are not accessibility or inclusiveness experts, but passionate people who did their best to provide relevant content and who will be happy to get any feedback or contribution you may have! The applications we are working on at the time of writing are not perfect by any means from an inclusiveness standpoint. With this project, we only try to provide some answers to the questions we had when beginning our work on accessibility and inclusiveness.</p> <p>We truly want this project to keep evolving beyond its original scope and our limited expertise!</p> <p>If at any point through your reading, you find some mistakes or missing information, please let us know by opening an issue or a pull request. We will be happy to review it and incorporate it to the project. We will also be happy to integrate any new module you would like to write.</p> <p>You can contribute on this project's repository.</p> <p>To run the project locally:</p> <ul> <li> <p>Clone the repository</p> </li> <li> <p>Install mkdocs: <pre><code>pip install mkdocs-material\n</code></pre></p> </li> <li> <p>Run the server</p> </li> </ul> <pre><code>mkdocs serve\n</code></pre> <p>If you commit, please use the syntax \"[section]-[acronym]: [commit_description]\" (example: \"A-AIE: first version of module\").</p> <p>If you need any help incorporating your work in ours, please feel free to open an issue or contact us.</p> <p>This project is licensed under CC BY-SA 4.0. This means that you are free to share, adapt and use its content (even for commercial use). Please note that when doing so you need to give appropriate credit and to release your version under the same license, indicating if changes were made.</p> <p>The views on accessibility and inclusiveness which are presented in this training solely engage the originals authors.</p>"},{"location":"#resources","title":"Resources","text":"<p>The editable file of how to navigate this training</p>"},{"location":"A-AIE/","title":"\ud83d\udc69\u200d\ud83e\uddbd Accessibility &amp; Ableism","text":"<p>In this module</p> <p>This module introduces the concepts of accessibility and ableism, from various standpoints.</p> <p>\u26f3\ufe0f Section: A. What is accessibility?</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 20'</p> <p>\ud83d\udcda Prerequisites:  \ud83e\udef3\ud83c\udfff Feeling the need for accessibility</p>"},{"location":"A-AIE/#when-to-use","title":"When to use?","text":"<p>Use this module to get a nuanced sense of what accessibility, ableism and techno-ableism really mean.</p>"},{"location":"A-AIE/#what-is-accessibility","title":"What is accessibility?","text":""},{"location":"A-AIE/#collective-definition-of-accessibility","title":"Collective definition of accessibility","text":"<p>Form a circle. The first participant will try to define accessibility. Write their proposition on a whiteboard. Each person must then iterate upon this definition, explaining to everyone the changes they make.</p> <p>We then read the collective definition, and ask once again if anyone wants to change something. Once it\u2019s settled, we can move onto the next part of this module.</p>"},{"location":"A-AIE/#formal-definitions-of-accessibility","title":"Formal definitions of accessibility","text":"<p>If you did the word-cloud of \ud83d\ude80 Accessibility starting point, you can go through the words that were proposed and try to match them to one of the following definition standpoints :</p>"},{"location":"A-AIE/#from-a-product-design-standpoint","title":"From a product design standpoint","text":"<p>According to Wikipedia:</p> <p>Wikipedia</p> <p>Accessibility is the design of products, devices, services, vehicles, or environments so as to be usable by disabled people.[1] The concept of accessible design and practice of accessible developments ensures both \"direct access\" (i.e. unassisted) and \"indirect access\" meaning compatibility with a person's assistive technology (for example, computer screen readers).[2]</p>"},{"location":"A-AIE/#from-a-legal-standpoint","title":"From a legal standpoint","text":""},{"location":"A-AIE/#canada","title":"\ud83c\udde8\ud83c\udde6 Canada","text":"<p>In the Accessible Canada Act (ACA), the government of Canada stated in 2019 that the primary goal of their accessibility policy was to:</p> <p>Accessible Canada Act (ACA)</p> <p>The overarching goal of the ACA is to realize a barrier-free Canada by 2040. The legislation benefits all Canadians, specially persons with disabilities, through the proactive dentification, removal and prevention of barriers to accessibility in 7 priority areas:</p> <ul> <li>employment</li> <li>the built environment</li> <li>information and communication technologies (ICT)</li> <li>communication other than ICT</li> <li>the design and delivery of programs and services</li> <li>the procurement of goods, services and facilities</li> <li>transportation</li> </ul>"},{"location":"A-AIE/#france","title":"\ud83c\uddeb\ud83c\uddf7 France","text":"<p>French law defines accessibility as</p> <p>French government</p> <p>Allowing the autonomy and participation of people with disabilities, by reducing or even removing the gap between their abilities, needs and will - and the physical, organizational and cultural components of their environment.</p> <p>Additionally, French companies are subject to the EAA, which is mentioned below.</p>"},{"location":"A-AIE/#european-union","title":"\ud83c\uddea\ud83c\uddfa European Union","text":"<p>The European Accessibility Act states that accessibility \"should be achieved by the systematic removal and prevention of barriers, preferably through a universal design or \u2018design for all\u2019 approach, which contributes to ensuring access for persons with disabilities on an equal basis with others.\"</p> <p>Since June of 2025, almost all businesses (excluding microenterprises) are required to comply with the EAA requirements.</p>"},{"location":"A-AIE/#from-a-software-standpoint","title":"From a software standpoint","text":"<p>Dylan Barell defines accessibility in software as</p> <p>Agile Accessibility Handbook, Dylan Barell</p> <p>It basically comes down to three principles:</p> <ul> <li>Can all your users, with the abilities and senses that they possess, perceive the information your application presents to them? For example, can they \u201csee\u201d the meaning of the little icon button with an image of a pen inside it?</li> <li>Can your users, with their specific input device or assistive technology, operate all the controls within your application\u2019s user interface? For example, if your application supports the operation of a button through touching the screen, does it also allow that button to be operated through a keyboard and a voice command?</li> <li>Can your users understand the information and the user interface controls? For example, if the application requires the creation of a password with constraints, are those constraints clearly communicated in a way that allows the user to complete the task without undue difficulty or an unreasonable degree of intellectual skill?</li> </ul> <p>In the French DINUM's RGAA (General reference document of accessibility enhancement), an accessible software is defined as one that can be perceived, understood, used, and optimal for people with disabilities.</p>"},{"location":"A-AIE/#from-a-political-standpoint","title":"From a political standpoint","text":"<p>We propose to define politically accessibility as:</p> <p>Striving to fight back against the structural tendency to exclusion of disabled people and attempting to provide them with a place (virtual or not) where they feel at ease and free to express themselves.</p> <p>Take some time to reflect together onto which definition is the closest to the one you built together. How do participants feel about all those definitions?</p>"},{"location":"A-AIE/#from-a-business-standpoint","title":"From a business standpoint","text":"<p>Accessibility is not only a moral obligation. It's also an important business question. By not making your software accessible, you are depriving it from a significant amount of potential users. Here are a few arguments corroborating this point.</p> <p>Agile Accessibility Handbook, Dylan Barell</p> <ol> <li> <p>The business opportunity represented by households with a disability. The numbers that are of interest here are:</p> <ul> <li>20% of people in the United States have a disability, and improvements in usability (or falling behind the competition) represent a major portion of the market;</li> <li>$490 million is the after-tax disposable income of adults with a disability in the United States (as of 2019). This is comparable in size to the African American or Hispanic market segments; and</li> <li>$10.3 billion is the e-commerce market size for accessibility.</li> </ul> </li> <li> <p>The number of disability-related lawsuits increased by 181% in 2019 alone, and the cost of responding to a lawsuit (independent of the settlement costs) is $350,000. This does not take into account the cost of brand damage or future lawsuits; and</p> </li> <li> <p>Accessibility is a human right, it is the right thing to do, and it probably aligns with the organization\u2019s values and its desire to improve digital user experiences.</p> </li> </ol> <p>This is further strengthened by the fact that the whole public sector has been the first in many countries to make accessibility a legal requirement for the tools they use.</p>"},{"location":"A-AIE/#understanding-ableism","title":"Understanding ableism","text":""},{"location":"A-AIE/#what-is-ableism","title":"What is ableism?","text":"<p>Ableism can be defined as</p> <p>Cambridge dictionary</p> <p>policies, behaviors, rules, etc. that result in unfair or harmful treatment of disabled people (= people who have an illness, injury, or condition that makes it difficult for them to do things that most other people can do) and in a continued unfair advantage to people who are not disabled</p> <p>Right now, some parts of your apps might only be accessible to those who can only, for example, see and hear. Thinking these senses as the \u201cdefault\u201d mediums for interacting with apps is ableist. It is very important to keep in mind that people who are qualified of \u201cdisabled\u201d are in reality simply working with a different set of abilities, which is typically more marginal, yet not inferior. If they can\u2019t access your app, it means that your design is broken - not them.</p> <p>A key to fighting ableism is remembering that disabilities only arise when there is a gap between the environments\u2019 expectations on what people can do, how they are supposed to do it and what and how people can actually do it.  Environment - and the way it is designed - plays an equal role as the body when it comes to disability. For example, in an environment built to be completely flat and non-obstructed, people who walk are way slower than people using a wheelchair.</p> <p>It\u2019s quite clear that our goal is to minimize ableism in the software that we provide, to build a more inclusive environment for everyone.</p>"},{"location":"A-AIE/#what-is-techno-ableism","title":"What is techno-ableism?","text":"<p>Techno-ableism is a term defined by Ashley Shew in her book Against Technoableism: Rethinking Who Needs Improvement, a lecture that we truly recommend.</p> <p>In the introduction of her book, she writes</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>Technoableism is a particular type of ableism, one that is highly visible in media and entertainment and omnipresent in the ways most people casually talk about technologies aimed at disability. Technoableism is a belief in the power of technology that considers the elimination of disability a good thing, something we should strive for. It\u2019s a classic form of ableism\u2014bias against disabled people, bias in favor of nondisabled ways of life. Technoableism is the use of technologies to reassert those biases, often under the guise of empowerment.</p> <p>Put simply, it\u2019s believing that disabled people need to be fixed by technology. Rather than celebrating the diversity and diverging ability of dis-abled people, tech innovators tend to try to \u201cfix\u201d them rather than working on the environment their technologies are structuring, often leaving them outside of the discussion about their needs.</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>Sometimes technology is seen as redeeming our lives: non-disabled people believe\u2014and expect us to believe\u2014that technology will \u201csolve\u201d the problem of our disability and save us, or those like us, in the future. Yet these expectations often don\u2019t match our circumstances. They confine us. When people assume that one device will \u201cfix\u201d us, they don\u2019t pay attention to the host of other concerns around disability technology\u2014the bad planning and design, the need for constant ongoing maintenance, the problem of money [\u2026], and the staggering lack of social support for disability accommodations [\u2026]. These are all forms of ableism.</p> <p>Software plays a huge role in today\u2019s daily life and communication. It can be a huge lever of inclusion, and consequently also of exclusion. Therefore, it\u2019s our duty as developers to strive to include as many people as possible, without falling into the trap of thinking that we are saving or fixing anything else than our apps.</p> <p>Some article titles documented by Ashley Shew depict the ableist \u201chero-syndrom\u201d that can occur in the tech industry.</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>\u201cTHE TECH GIVING PEOPLE POWER TO DEAL WITH DISABILITY\u201d \u2014BBC NEWS</p> <p>\u201cHOW TECHNOLOGY WILL CHANGE THE LIVES OF PEOPLE WITH DISABILITIES\u201d \u2014FORBES</p> <p>\u201cFIRST PROSTHETIC LIMB DESIGNED FOR WOMEN: \u2018I FEEL LIBERATED\u2019\u201d \u2014BBC2</p> <p>\u201cROBOTIC EXOSKELETONS ARE HERE, AND THEY\u2019RE CHANGING LIVES\u201d \u2014POPSCI</p> <p>It becomes clearer and clearer that our goal is to try and provide a safe place rather than fix or save anyone. For a more concrete example, Ashley Shew showcases how Discord became a welcoming place for many autistic people.</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>Awni mentioned Discord as a social platform \u201ceasily adapted by autistic users to facilitate autistic-styled communication due to its flexibility both with custom emotes and for purpose-centric server organization.\u201d Gardiner pointed to the importance of letting autistic people lead tech conversations with what they want and how they want to do things. This doesn\u2019t mean jumping in to teach autistic people to play games in the way allistic people do but rather letting the \u201cnothing about us without us\u201d lesson of the disability rights movement carry into this space: to learn from autistic people how to use spaces autistically.</p> <p>Design must therefore provide flexibility and adaptability for the varying need of users and not restrict a normative user experience.</p> <p>Understanding those concepts are crucial to avoid very common misguided behaviors. But now, we need to see how today\u2019s organizations and regulation stand regarding them\u2026</p>"},{"location":"A-AIE/#resources","title":"Resources","text":"<p>Particify \u2013 Interactive education</p>"},{"location":"A-AIE/#sources","title":"Sources","text":"<p>Wikipedia's definition of Accessibility</p> <p>About an Accessible Canada</p> <p>Notion d'accessibilit\u00e9 num\u00e9rique - RGAA (France)</p> <p>Loi accessibilit\u00e9 : cadre l\u00e9gal et obligations</p> <p>Barrell Dylan. Agile Accessibility Handbook</p> <p>Definition of ableism</p> <p>Shew Ashley, Against Technoableism: rethinking who needs improvement. 2023</p>"},{"location":"A-ASP/","title":"\ud83d\ude80 Accessibility starting point","text":"<p>In this module</p> <p>This short module allows people to share anonymously their initial position by answering questions regarding accessibility, before discussing the results collectively.</p> <p>\u26f3\ufe0f Section: A. What is accessibility?</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"A-ASP/#when-to-use","title":"When to use?","text":"<p>Use this module to kick off the training. It is useful to get a collective feeling of how is the room\u2019s initial knowledge and interest about the subject.</p>"},{"location":"A-ASP/#description","title":"Description","text":"<p>Participants are asked a few questions which results are then shown on the screen and discussed collectively.</p> <p>These questions can include:</p> <ul> <li>On a scale from one to ten, how do you evaluate your knowledge about accessibility?</li> <li>How much time do you typically spend on accessibility issues during a week?</li> <li>Is there something preventing you from dealing with the topic as much as you would ideally like to?</li> </ul> <p>Between each question, it can be useful to discuss collectively the results, avoiding the awkward situation where participants would fill out the answers and remain silent.</p> <p>It can be a good idea to ask the participants possible explanations of these results, rather than asking them to explain their own answer, as we would not want anyone feeling ashamed about their initial position.</p>"},{"location":"A-ASP/#resources","title":"Resources","text":"<p>Particify: an open source tool which is useful to do live polls, word clouds, etc.</p>"},{"location":"A-ATM/","title":"\ud83d\udcf2 Assistive technologies: Mobile","text":"<p>In this module</p> <p>This module allows participants to get to know the major assistive technologies used on mobile devices. The goal is not to get in depth on how to use them but rather to help designers and developers get an idea of what is commonly used, and to find the relevant tools for their use cases.</p> <p>\u26f3\ufe0f Section: A. What is accessibility ?</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 5'</p> <p>\ud83d\udcda Prerequisites: \ud83c\udfa8 Inclusive design 101</p>"},{"location":"A-ATM/#introduction","title":"Introduction","text":"<p>There are infinite unique (and combining) ways of interacting with mobile devices. In this module, we'll try to cover the most commonly used assistive technologies so that you can get an idea of the ways your users might be interacting with your app.</p>"},{"location":"A-ATM/#screen-readers","title":"Screen readers","text":"<p>Just like computers, screen readers constitute an assistive technology that is essential to many users. Nevertheless, the way they are designed, implemented and used differ a lot from what you will commonly see on desktop platforms:</p> <ul> <li>They are almost always directly built and deeply integrated into the OS, while desktop screen readers are typically third party apps.</li> <li>They embed an alternative way of navigating using specific gestures, while desktop screen readers commonly rely on keyboard navigation.</li> </ul> <p>On Android, the feature's name is TalkBack. On iOS, it's VoiceOver. While they have many differences when it comes to advanced use, their basic usage is very similar. On both platforms:</p> <ul> <li>Quickly scan the interface by running your finger through the screen as if you were reading braille.</li> <li>Swipe left of right to navigate to the previous or next element in the interface.</li> <li>Double-tap to activate an element (e.g. a push button)</li> </ul> <p>Here is a video from Android showcasing how TalkBack works from a user perspective.</p>"},{"location":"A-ATM/#alternative-peripherals","title":"Alternative peripherals","text":"<p>Some people prefer or need to interact with mobile devices through external peripherals. These can either be switches (with typically two buttons), sticks, game controllers, keyboards, etc.</p> <p>Making an app accessible to these is most commonly done by making it accessible to screen readers. If the right elements are focusable, those should work just fine. Making them work great mainly comes down to providing shortcuts and good headings management.</p> <p>Here is a video from Apple Developer showing some Full Keyboard support on iOS apps.</p>"},{"location":"A-ATM/#switch-control","title":"Switch control","text":"<p>Often combined with other controls (like eye, voice or head motion), switch control allows users to interact with app without needing the ability to precisely aim for the touchscreen elements. Users can have custom various actions (like go next, go previous, interact, etc.) on each switch, allowing for highly specific setups.</p> Accessibility switch <p>Here is an example use of a single switch to control an iPhone.</p>"},{"location":"A-ATM/#eye-and-face-control","title":"Eye and face control","text":"<p>Eye-tracking (fully supported on iOS, still experimental on Android) is another way of interacting with interfaces via gaze. Users can look at an element for a certain amount of time or perform a sound, move their head or even tap a switch while looking at an element to take action on it.</p>"},{"location":"A-ATM/#voice-control","title":"Voice control","text":"<p>Users can also use their voice to choose which elements to select. Labeling your app properly allows them to call elements by their name rather than by numbers.</p>"},{"location":"A-ATM/#accessibility-settings","title":"Accessibility settings","text":"<p>Depending on the OS, there are many ways users can fine-tune their experience through accessibility settings. Your role as a software builder is to test your interface with many combinations of settings to make sure it works well. While we won't go through these here, you can browse your device's settings to discover all the possibilities your OS offers, as well as check out this great resource for general information on platform-specific mobile assistive technologies.</p>"},{"location":"A-ATM/#resources","title":"Resources","text":"<p>APPT's Accessibility documentation</p>"},{"location":"A-BCT/","title":"\ud83d\uddfa\ufe0f Brief cartography of today\u2019s accessibility landscape","text":"<p>In this module</p> <p>We will cover the main actors of today's accessibility landscape as well as their dynamics.</p> <p>\u26f3\ufe0f Section: A. What is accessibility ?</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 10'</p> <p>\ud83d\udcda Prerequisites: \ud83d\udc69\u200d\ud83e\uddbd A-AIE: Accessibility &amp; Ableism</p>"},{"location":"A-BCT/#when-to-use","title":"When to use ?","text":"<p>This module is useful as an introduction to understand what are the current dynamics in the accessibility landscape, what actors are considered as reference, and which ones are disregarded by most experts.</p>"},{"location":"A-BCT/#disclaimer","title":"Disclaimer","text":"<p>We -the original authors- are not experts by any mean, only engineers working on accessibility and inclusiveness trying to provide others with the resources we wished we had when starting working on accessibility and inclusiveness. We don't have a complete understanding of all stakes of the accessibility landscape. Keep in mind that the following cartography will certainly miss some precisions. If you want to help completing it with your own knowledge, feel free to contact us or to open a pull request on our repository.</p>"},{"location":"A-BCT/#the-actors-of-accessibility","title":"The actors of accessibility","text":"<p>The actors can be separated in four main categories: the publics actors, non-profit collectives, consulting firms, small companies (including start-ups) and bigger corporate actors. We could also mention researchers and book writers - but this would probably turn this module into a full bibliography.</p>"},{"location":"A-BCT/#countries-institutions","title":"Countries &amp; institutions","text":""},{"location":"A-BCT/#countries","title":"Countries","text":"<p>Countries plays an increasing role in the accessibility landscape. As awareness rises, the law evolves to guarantee access to technology as a fundamental human right. We briefly mentioned the law of some countries in Accessibility &amp; Ableism. Additionally, this map holds current laws for many countries (despite having a strong bias towards western countries).</p>"},{"location":"A-BCT/#european-union","title":"European Union","text":"<p>The European Union adopted in 2019 the European Accessibility Act (EAA), which requires digital service providers to make their product accessible. Deque, a well-known accessibility consulting firm, has a detailed article on the subject.</p>"},{"location":"A-BCT/#non-profit-collectives","title":"Non-profit collectives","text":"<p>Non-profit organizations are at the core of producing resources about accessibility and inclusiveness, especially from a design and platform agnostic perspective. They are also a great sources for critical subjects on the current state of accessibility for different platforms as they often have less conflicts of interest.</p>"},{"location":"A-BCT/#the-world-wide-web-consortium-w3c","title":"The World Wide Web Consortium (W3C)","text":"<p>The World Wide Web Consortium is the organization behind multiple accessibility guidelines and standards recognized worldwide. With over 30 years of existence, it's mostly known for its work on the WCAG which are the worldwide standards in term of web accessibility.</p> <p>They also created and updated a very extensive documentation on how to meet those standards with their Quick Reference on How to Meet WCAG. They are definitely one of the most important organizations providing resources on accessibility.</p> <p></p> <p>They have full time employees but also rely on volunteers contributions, so if you want to help them, go ahead!</p> <p>Sadly, despite the amazing work that they do on accessibility, they still lack diversity. They are trying to do better on this topic, providing yearly detailed statistics of their diversity for their Advisory board, technical architecture group, board of directors and management. We can notice that their inclusiveness seems to improve over time.</p> <p></p>"},{"location":"A-BCT/#the-appt-foundation","title":"The Appt Foundation","text":"<p>The Appt foundation is a non-profit organization started in the netherlands that specialize on mobile applicative accessibility. It doesn't have employees but work with experts and industrial partners. They have multiple extensive documentations including code samples about accessibility for mobile frameworks that are often way clearer than the official ones.</p> <p></p> <p>It's definitely a very useful resource if they have documentation for the framework you are working with. You can contribute on their repository.</p>"},{"location":"A-BCT/#the-a11y-project","title":"The A11Y Project","text":"<p>The A11Y Project mostly focuses on web accessibility but isn't limited to it, also hosting a very extensive and useful list of resources. Their posts are informative. They have a \"spotlight\" section which is useful to get to know the contributions of amazing people working on software accessibility. Most importantly, their list of medias is well furnished with dozen of carefully selected resources. We strongly invite you to take a look at it.</p> <p></p>"},{"location":"A-BCT/#the-accessibility-book-club","title":"The Accessibility Book Club","text":"<p>The Accessibility Book club is a small organization releasing a yearly book list about accessibility. Their selection is a very useful tool to stay up to date with the developments of the accessibility and inclusiveness publications.</p> <p></p>"},{"location":"A-BCT/#consulting-firms","title":"Consulting firms","text":"<p>There are many consulting firms about accessibility and inclusiveness. The quality of their services vary greatly in quality. Therefore we won't be recommending much of them as we cannot certify of the expertise of structures we haven't directly worked with.</p>"},{"location":"A-BCT/#deque","title":"Deque","text":"<p>While we cannot blindly recommend firms, Deque is an actor of the accessibility landscape that we need to mention. They built Axe which is one of the most trusted web accessibility tool with over two billion downloads. Additionally, they are behind the accessibility of some of the biggest companies worldwide (working with Google, Microsoft and other large structures) and publish very relevant books on the topic. If you are looking for training, tools or an audit, you should consider their expertise.</p>"},{"location":"A-BCT/#corporate-actors","title":"Corporate actors","text":"<p>Corporate actors and especially operating system providers can take an important role in accessibility and inclusiveness measures, either by their good or their bad will.</p>"},{"location":"A-BCT/#apple","title":"Apple","text":"<p>For years, Apple has been the reference for accessibility. Their tools and resources are among the best out there. Unfortunately, these tools and resources are directly targeted for their platforms. While some of them can be useful when developing for other platforms, their power really lies in the control they have on the whole technological stack, from hardware to framework. That said, their investments in setting the bar high with accessibility really pushed their competitors to try and do the same. While most third party apps still lack accessibility, the tools are here.</p> <p>Recently, Apple announced their new design system, called Liquid Glass. This announcement have been heavily criticized for structural accessibility issues introduced by this redesign. As of the time of writing, we'll need to wait for the official release of the OS to see the impacts of these changes at scale.</p>"},{"location":"A-BCT/#microsoft","title":"Microsoft","text":"<p>While we do not endorse all of their content (especially the one related to \"inclusive AI\"), Microsoft has been publishing great extensive design resources about inclusiveness on their dedicated website.</p>"},{"location":"A-BCT/#what-to-look-for-and-what-to-avoid","title":"What to look for and what to avoid","text":""},{"location":"A-BCT/#accessibility-and-ai-powered-tools","title":"Accessibility and AI powered tools","text":"<p>If you search for some accessibility tools online, it's very probable that the first sponsored results to pop up will be something like \"Automated Web Accessibility Solution\", often powered by AI. Those solutions are largely criticized by accessibility experts. In an open letter signed by more han 400 accessibility advocates, we can read:</p> <p>Sarah Gooding, Accessibility Advocates Sign Open Letter Urging People Not To Use AccesiBe and Other Overlay Products. 2021</p> <ol> <li>We will never advocate, recommend, or integrate an overlay which deceptively markets itself as providing automated compliance with laws or standards.</li> <li>We will always advocate for the remediation of accessibility issues at the source of the original error.</li> <li>We will refuse to stay silent when overlay vendors use deception to market their products.</li> <li>More specifically, we hereby advocate for the removal of accessiBe, AudioEye, UserWay, User1st, MK-Sense, MaxAccess, FACIL\u2019iti, and all similar products and encourage the site owners who\u2019ve implemented these products to use more robust, independent, and permanent strategies to making their sites more accessible.</li> </ol> <p>Accessibility needs to be baked into an application from the very beginning. And while some work can be done to make existing interfaces more accessible, there is no magic band-aid fix that will make your app accessible. Indeed, accessibility is all about nuance, context and diverse user feedback. Trying to automate its whole process is paradoxical. Doing so will only result in your app striving to match arbitrary accessibility rulesets when the whole point is to embrace diversity and the uniqueness of ways to interact with a UI. The rulesets, rather than being a tool to guide you, becomes the goal, effectively silencing disabled users. Relying on those tools doesn't make your app usable for a disabled user. It will simply make sure no failure is triggered when running an automated test. Its lack of context will often lead them to the implementation of confusing and non-usable solutions.</p> <p>Tip</p> <p>Accessibility is not a goal, it's a process. A process which cannot be done without disabled users and experts.</p>"},{"location":"A-BCT/#green-and-red-flags-for-choosing-accessibility-experts","title":"Green and red flags for choosing accessibility experts","text":"<p>The previous section should help you what to avoid, but what qualities should you be looking for when choosing experts ?</p> <p>Look for...</p> <ul> <li>Structures that have disabled experts or value directly working with disabled people</li> <li>Structures that talk about inclusiveness rather than accessibility alone</li> <li>Structures that provide transparency about their own diversity distribution</li> </ul> <p>Avoid...</p> <ul> <li>Automated accessibility overlay products</li> <li>Products that claims to have automated AI accessibility fixes</li> <li>Promises of quick fixes</li> <li>Structures that delivers a one time accessibility enhancement without maintenance or knowledge transmission to your team</li> </ul>"},{"location":"A-BCT/#sources","title":"Sources","text":"<p>Sarah Gooding, Accessibility Advocates Sign Open Letter Urging People Not To Use AccesiBe and Other Overlay Products. 2021</p>"},{"location":"A-FNA/","title":"\ud83e\udef3\ud83c\udfff Feeling the need for accessibility","text":"<p>In this module</p> <p>Sometimes, understanding a concept is not enough. Feeling the need for accessibility and the impacts of ableism will make it easier for trainees to engage.</p> <p>\u26f3\ufe0f Section: A. What is accessibility?</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: \ud83d\ude80 Accessibility starting point</p>"},{"location":"A-FNA/#when-to-use","title":"When to use?","text":"<p>This module gives both a statistical overview of accessibility, the opportunity to experience the need of its presence and how dreadful its absence can be.</p>"},{"location":"A-FNA/#introduction","title":"Introduction","text":"<p>Accessibility is absolutely crucial. In fact, according to a study from Statistics Canada, 27% of all Canadians have at least one disability. This number increased of 4.7 percentage points between 2017 and 2022.</p> <p>More globally, according to the World Health Organization, 16% of the world\u2019s population experience significant disability.</p> <p>While disabilities and their experiences are varied and overlap each other, letting the trainees try their application with a screen reader can be a good starting experiment for you to get a sense of how crucial it is.</p>"},{"location":"A-FNA/#try-it-out","title":"Try it out!","text":"<p>On different platforms, taking turns, each participant is put in front of a device connected to a screen in their back. All the trainees can see the application\u2019s screen but the one using it.</p> <p>They must then try to execute a task like changing a specific setting or writing a message to a contact, without seeing the app nor using a mouse. At the end of this small workshop, they are invited to debrief on how they felt and what the main blockers were.</p> <p>Tip</p> <p>On an application that recently had strong accessibility improvements, this experience can me made twice: firstly with the now fairly accessible version and then with the old one.</p>"},{"location":"A-FNA/#the-systemic-failure-of-software-accessibility","title":"The systemic failure of software accessibility","text":"<p>This section will mainly be based on the the WebAIM Million 2025 report on the accessibility of the top 1,000,000 home pages. It only includes web pages, but as we will see later, resources about the state of desktop and mobile accessibility are few. We can make the hypothesis that while not completely similar, both web pages and applications must be navigated with the same assistive technologies, and therefore share similar trends of evolution.</p> <p>The WebAIM collective states that \u201cAcross the one million home pages, 50,960,288 distinct accessibility errors were detected\u2014an average of 51 errors per page\u201d.</p> <p>Their graph depict the evolution of the average number of detectable errors for home pages.  Failures typically include missing labels, low contrast text or missing alternative captions for images.</p> <p></p> <p>Home pages tend to get more and more complex. While some websites are getting more accessible, those who don\u2019t tackle the issue tend to get even worse. Examples of greatly accessible websites are rare. Indeed, \u201c94.8% of home pages had detected WCAG 2 failures.\u201d</p> <p></p> <p>On this graph coming from the same study, you can see the evolution of the number of elements on home pages has been increasingly steadily over the past few years.</p> <p>You might be wondering, what are the most common accessibility shortcomings detected? This chart is a good starting point to tackle the most obvious issues that our applications and websites might have.</p> <p></p>"},{"location":"A-FNA/#wrapping-up","title":"Wrapping up","text":"<p>As we saw through this module, despite being a crucial need for at least 20% of all users, accessibility as it is implemented on common websites and applications are overwhelmingly insufficient. With that said, accessibility isn\u2019t about lowering those stats of detected failures, it\u2019s about making sure that we are not contributing in isolating and marginalizing whole communities.</p> <p>Until now, we only mentioned accessibility and disability as vague concepts, but understanding and feeling what they mean conceptually is key to concretely improve your software.</p> <p>So\u2026 what exactly is accessibility?</p>"},{"location":"A-FNA/#sources","title":"Sources","text":"<p>WebAIM: The WebAIM Million - The 2025 report on the accessibility of the top 1,000,000 home pages</p> <p>Word health Organisation: Disability</p> <p>New data on disability in Canada, 2022</p>"},{"location":"A-ITD/","title":"\ud83d\udd27 Assistive technologies : Desktop","text":"<p>In this module</p> <p>This module gives a comprehensive list of accessibility testing tools (both manual and autonomous). The goal is not to get in depth on how to use them but rather to help designers and developers to find the relevant tools for their use case.</p> <p>\u26f3\ufe0f Section: A. What is accessibility?</p> <p>\ud83d\udc65 Audience: Developers</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"A-ITD/#when-to-use","title":"When to use?","text":"<p>This module is almost certainly a must have for an type of workers searching for the adequate tools.</p>"},{"location":"A-ITD/#what-to-avoid","title":"What to avoid","text":"<p>As we saw in \ud83d\uddfa\ufe0f Brief cartography of today\u2019s accessibility landscape, some tools are really despised by accessibility and inclusiveness experts and with valid reasons. We could summarize by saying: stay away from AI accessibility tools. They are often more detrimental than anything. Accessibility is really hard to automate specifically because it's about embracing diversity and learning from other's needs. Using AI tools could make you technically compliant with some legislation (for example filling all of the empty labels on your application) but it won't make your application usable by people with disabilities.</p> <p>The errors automatically detected highly depends of context (for example a long accessibility label is not necessarily a bad thing if attached to a schematic but will be flagged automaticly as an issue). Furthermore, the fixes are often clunky, unintuitive and don't take the specific of the application architecture into account.</p> <p>Disabled people are the expert about accessibility. Listen to them, not to an AI trying to predict their needs.</p>"},{"location":"A-ITD/#a-screen-reader-and-a-keyboard","title":"A screen reader and a keyboard","text":"<p>Screen readers are very useful tools to test the accessibility of an application. While it does not fullfill the need of testing by users in question, apps that are fully accessible using a keyboard and a screen reader are more likely to address a good amount of accessibility needs.</p> <p>A good and simple practice is to always check if your modifications on the UI are fully accessible only with your keyboard \u2014 not a challenge for our beloved vim users.</p> <p>You can find more information in this very informative video:</p> <p>You may also find this comparison of screen readers helpful:</p> <p>Most systems have a built-in screen reader in their settings,  you should use them to test your app but don't limit yourself to them as they are often pretty basic. Most screen readers have plugins for the most used apps. If you have the available resources, you might want to develop one for your app specifically.</p>"},{"location":"A-ITD/#nvda","title":"NVDA","text":"Platform Pros Cons WindowsTheoretically Linux (via Wine) <ul> <li>Free and open source</li> <li>Very lightweight</li> <li>Doesn't crash much</li> </ul> <ul> <li>Plugins for major productivity apps are often not as robust as JAWS</li> </ul> <p>NVDA is open source and mainly available on Windows (you can still run it on Linux using Wine but it will inconsistently work). It's free and therefore is a very good tool to start testing accessibility. One of its key advantage is that it's very lightweight meaning that it starts a lot faster that other screen readers which can make all the difference when those softwares are known to crash easily. It's still a bit limited on some complex applications like Excel.</p> <p>It still has an active community developing plugins for integrating it into different apps. Consider doing it for yours!</p> <p>You can easily find a complete list of shortcuts for NVDA.</p> <p></p>"},{"location":"A-ITD/#jaws","title":"Jaws","text":"Platform Pros Cons Windows <ul> <li>Industry standard</li> <li>Has a lot of plugins</li> </ul> <ul> <li>Crashes a lot</li> <li>Requires a lot of RAM</li> <li>Very expensive</li> <li>Hard to learn</li> <li>Can be confusing</li> </ul> <p>Jaws is is the high end professional screen reader. It allows for a lot of customization, has a lot of plugins especially for higher education. That said, it can be overwhelming, crashes for seemingly no reason, it\u2019s not open source and more importantly a license will cost you more than 600$ a year\u2026</p> <p>That's why we recommend NVDA.</p> <p></p>"},{"location":"A-ITD/#voiceover-for-macos","title":"VoiceOver for macOS","text":"Platform Pros Cons macOS <ul> <li>Very easy to learn</li> <li>Very fluid and intuitive</li> </ul> <ul> <li>Only available on macOS</li> </ul> <p>VoiceOver is the native screen reader for Apple products. It's known for being very  easy to learn making for a fluid and intuitive experience. In the screen reader comparison linked previously in this article, the user state that learning Jaws took them years compared to the week-end it took them to get used to VoiceOver.</p> <p>While being a very good tool, VoiceOver is only available on apple machines and therefore often not useful to most users.</p>"},{"location":"A-ITD/#accessibility-insights-for-windows","title":"Accessibility Insights for Windows","text":"Platform Pros Cons Windows <ul> <li>One of the only tools available to check object tree and labels on desktop apps</li> </ul> <ul> <li>Only works on Windows</li> <li>Doesn\u2019t provide much information about how to fix the issue encountered</li> </ul> <p>Accessibility Insights for Windows is a tool developed by Microsoft. It aims at visualizing the object hierarchy of an application. It\u2019s a must have for diagnosis of missing labels and understanding where property hierarchy is broken.</p> <p>Here you can see an example of a poorly described object tree in Jami.</p> <pre><code>\u2755 An empty label is not always a bad thing depending of the framework that you\nare using. It can sometimes be useful to not register too many ID accessible as\nsingletons.\n</code></pre> <p></p>"},{"location":"A-ITD/#wave","title":"Wave","text":"Platform Pros Cons Web <ul> <li>Very easy to use</li> <li>Completely free</li> </ul> <ul> <li>Can be limited</li> <li>Often misleading</li> </ul> <p>Wave is a testing software to automatically detect warnings and errors related to the WCAG Accessibility guidelines. It\u2019s as simple as entering your domain to see prevalent issues with your website.</p> <p>While you might be working on a native app, it\u2019s very likely that you or your organization have a website along with it. Wave is a very convenient way to check if you\u2019re also up to date on that end without necessitating further knowledge.</p> <p></p> <p>Still be careful not to believe blindly the feedback form automated tools lke Wave. It will often make mistakes and is not a substitute for savoir-faire in any way.</p> <p></p> <p>Some other similar web accessibility tools would be Axe or Lighthouse.</p> <p>Again, please note that accessibility experts are mostly warning us not to rely too much on those diagnosis tools as they can often be misleading and prevent us from getting into the perspectives of disabled users.</p>"},{"location":"A-ITD/#user-groups","title":"User groups","text":"Pros Cons <ul> <li>The most relevant feedback you could get</li> <li>Allows you to create in synergy with the users</li> </ul> <ul> <li>Very time consuming to organize</li> <li>Can lead to biases if not done properly</li> </ul> <p>User groups are one of the most reliable way to build an accessible and inclusive application. Getting people from various background to test your application and here about their feedback and ideas is in our opinion the best way to minimize the risk of leaving some users behind.</p> <p>You should try and make those user groups as diverse as possible. You could post on your socials asking if some disabled users would be interested in providing feedback. Users can have different designated discussion canal with the team working on the project or directly contact them. Keep in mind that you want to promote interaction between users, allowing them to reflect on their own experiences.</p> <p>This can only be done properly if the team working on the project is actively listening to the feedback they get. Their should be a way of keeping track of the different problems raised by the users and the progress made on fixing them. The product and design team should have occasional sessions and calls with some users to discuss precisely how they would want to implement something (for example what implementation of keyboard navigation feels more intuitive). This can be massively useful during prototyping.</p>"},{"location":"A-ITD/#resources","title":"Resources","text":"<p>NVDA</p> <p>Jaws</p> <p>VoiceOver</p> <p>Accessibility Insights for Windows</p> <p>Wave</p>"},{"location":"A-ITD/#sources","title":"Sources","text":"<p>Accessibility Testing Tools Overview</p> <p>NVDA Keyboard Shortcuts</p> <p>Screen Reader Comparison</p>"},{"location":"B-DSU/","title":"\ud83e\udd3a Developer stance &amp; user collaboration","text":"<p>In this module</p> <p>When creating, finding the right stance can be perilous;     - How to help without infantilizing?     - How to care without assuming one's needs?     - How to design for something we don't experience?</p> <p>This module aims at finding answers to those questions from a software perspective.</p> <p>\u26f3\ufe0f Section: B. From accessibility to inclusiveness</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 10'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"B-DSU/#when-to-use","title":"When to use?","text":"<p>This module tries to provide the trainees with a reflection on what one's perspective on the world is and how to attempt to account for other's ones.</p>"},{"location":"B-DSU/#description","title":"Description","text":""},{"location":"B-DSU/#who-are-you","title":"Who are you?","text":"<p>Who are we as people? We all have a singular, partial perspective of the world. These comes with biases but also insights and experiences. Opening up to different views is always a tough process. In Developing Inclusive Mobile Apps, Rob Whitaker gives an exercise to identify our biases. The following workshop is a variation adapted from theirs.</p> <p>Provide a piece of paper to all of the trainees attempting the training. Ask them to make a list of five person the 5 peoples they trust the most, people they would go to for advices (no matter whether they are colleagues, family or friends). Once that's done, ask them to count a point each time the answer to the following questions is yes.</p> <ol> <li>Are all of them of the same ethnicity as you?</li> <li>Do all of them have the same sexual orientation?</li> <li>Do all of them have the same nationality as you?</li> <li>Are all of them considered able-bodied?</li> <li>Do all of them have a diploma (or, are pursuing one)?</li> <li>Are all of them cisgender?</li> <li>Are all of them working/studying or being retired?</li> <li>Are all of them from the same or higher economic background as you?</li> <li>Are most of them men?</li> <li>Do they all speak the language of the country they live in?</li> </ol> <p>Once that's done, count from 1 up to 10 and ask the trainees to raise their hand on the number corresponding with their score. Precise this part of the workshop is entirely optional. To ease of trainees you can also raise your hand on the number corresponding to your own results. This should help the group to start reflecting on their own biases. Note that you can adapt those questions to fit the cultural environment in which you give this formation.</p>"},{"location":"B-DSU/#who-is-disabled","title":"Who is disabled?","text":"<p>Who exactly is disabled is a question with no evident answer. According to the 2024 study of the APPT foundation, a non profit based in the Netherlands, 61% of Dutch Android users and 45% of Dutch iOS users have one or more accessibility settings activated on their phone. A quarter of the Android user they surveyed used two or more accessibility features.</p> <p></p> <p><sub>Source: APPT Foundation, Accessibility Statistics 2024</sub></p> <p>Disability is not something easy to categorize. A lot of disabilities are not visible, some develop over time, other have varying effects that make them hard to apprehend. A lot of people, thinking of themselves as able-bodied will use a bigger font on their phone. The frontiers between someone without any disability who has glasses and someone with low vision is very hard to establish. As stated in the book Developing Inclusive Mobile Apps, by Rob Whitaker:</p> <p>Rob Whitaker, Developing Inclusive Mobile Apps</p> <p>Disability is not a binary state. We all have \"abilities and limits to those abilities. Disability happens when we have built something that doesn\u2019t work for someone with particular skills.</p> <p>In fact, it could even not be desirable to draw this line. Ashley Shew states in Against Technoableism: rethinking who needs improvement:</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>Today, many of our ideas about able-bodiedness and disability come from classifications based on who is suitable for plantation or factory work: we call people \u201cdisabled\u201d when they can\u2019t perform \u201cnormal\u201d amounts of physical labor. [...] Disability has not always been as deeply tied to the ability to do labor as it is now. As Kim Nielsen\u2019s A Disability History of the United States shows, many Native American cultures had more room for variation and a different sense of health and wellness; disability was (and is) not stigmatized in the same ways among some Native American groups **(and, incidentally, many Native languages have no word for \u201cdisability\u201d as a category). Nielsen explains how Plains Indian Sign Language (the most well documented of Native sign languages), for instance, was used by various Plains tribes as a common language of trade\u2014so signed language was a natural part of culture and language such that communication norms allowed more easily and naturally for deaf inclusion.</p> <p>Depending of the circumstances, we are all disabled and we will all be. As stated previously, disability is plural, a shallow category that shouldn't negate intersectional thinking.</p>"},{"location":"B-DSU/#who-do-you-want-to-be","title":"Who do you want to be?","text":""},{"location":"B-DSU/#disability-experts-and-disabled-experts","title":"Disability experts and disabled experts","text":"<p>In Against Technoableism: rethinking who needs improvement, Ashley Shew also writes extensively about expertise on accessibility. While disabled experts are often not taken seriously, some of their able-bodied peers consider themselves experts at understanding one's needs. She states:</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>Throughout, I consider disabled people the experts about disability. I\u2019m no longer interested in what so-called experts (nondisabled scientists, physicians, therapists, and so on) have to say. These narratives are already overrepresented, and in some cases, they have done damage to disabled people as a community, disabled people as knowers, and the experience of disability as valid and valuable. When we don\u2019t listen to those with actual experience, we often get accounts of disability and technology completely wrong. Disabled people are \u201cthe real experts\u201d (the title of Michelle Sutton\u2019s 2015 edited volume about and authored by autistic people) when it comes to technology and disability. We use technologies. We also reject them, grapple with them, or repurpose them. The views on technology we get from listening to disabled people often look very different from those of people educated in the medical and \u201chelping\u201d professions.</p> <p>We cannot replace the perspectives of people with disabilities simply by reading about them or running a series of automated tests. We highly encourage recruiting people from diverse backgrounds in your team. The whole project will benefit from varying perspectives and it could help to leverage against systemic exclusion and hiring discriminations which affect minorities. In fact, a study from the Chartered Institute for IT states that in the UK alone, \"Nearly 90,000 disabled people are 'missing' from tech industry\".</p> <p>But your working environment will never be representative of the whole world and every user. As quoted in \ud83d\udd2d Inclusiveness needs overview:</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>\u201cEmploying the word \u201cusers\u201d can result in falling into the trap of thinking of users as one group\u00a0\u2013 an amalgamation of people who are out there somewhere in the world using your app, a group of people that you\u2019ll never meet and never know. This form of \u201cgroup think\u201d leads to creating a \u201cone-size-fits-all\u201d solution that, like everything claiming to be \u201cone size fits all,\u201d in reality fits no one.\u201d</p>"},{"location":"B-DSU/#embracing-diversity","title":"Embracing diversity","text":"<p>As we need to embrace diversity, it is crucial to fight a natural urge of all software creators: the will to personally find, design, and implement the solution to every problem. There is no one solution, and if there were, you would probably not be the one to find it. Your role as a software builder is to reach out to the real accessibility experts: those who rely on accessibility and experience its flaws every day, i.e. people with disabilities. Therefore, rather than trying to produce a \"perfectly accessible\" and inclusive product, we would rather suggest to try and make the main features as inclusive as possible and then get feedback from diverse users on what are their main issues with your software are.</p> <p>It's likely that your anticipation of their needs will not match their experience. Maybe you've spent hours making a video calling feature accessible for low vision users when they mostly struggled with the button for sending messages not being labeled as such, a fix that would have taken you a few minutes. Let them, the real experts, guide your priorities. Nothing about them without them.</p> <p>This does not mean your role in the feedback process is passive. Providing the space for people to give feedback is the cornerstone of that process. Consider setting up a dedicated form, type of issue, or even email for these topics. Even if it is already technically possible to share those issues via your current channels, creating a specific one show your intention of treating and valuing them.</p> <p>This does not mean either that your expertise is useless if you are not experiencing the discriminations for which you are assessing your products. As you know the product you are building and what experience you are aiming for, you - as a product engineer, designer, or even developer - will be necessary to understand what can be enhanced. For example, users with low vision or who are blind cannot give feedback on elements of the interface they ignore. If an element is not reachable, they may not be able to tell you that it's not accessible, as they have no way of knowing its existence.</p> <p>The best way of tackling those issues is by directly looking at them using the application. It's only at the intersection of your two expertise that an understanding of what goes wrong can emerge. And this is why we recommend testing next to the user which is the best way to understand how your product is being used! This will avoid you getting some feedback like: \"sometimes when creating an account, my screen reader stops working\" - an unclear issue which is yet the best that can be given to you.</p>"},{"location":"B-DSU/#sources","title":"Sources","text":"<p>Whitaker Rob. Developing Inclusive Mobile Apps, Building Accessible Apps for iOS and Android, 2020.</p> <p>Shew Ashley, Against Technoableism: rethinking who needs improvement. 2023</p> <p>The Chartered Institute for IT, Nearly 90,000 disabled people are 'missing' from tech industry, says professional body. 2024</p>"},{"location":"B-IAP/","title":"\u2697\ufe0f Bring inclusiveness and accessibility to your pipeline","text":"<p>In this module</p> <p>This module gives guidelines and advice on how to incorporate inclusiveness into your organization's workflows.</p> <p>\u26f3\ufe0f Section: B. From accessibility to inclusiveness?</p> <p>\ud83d\udc65 Audience: Everyone, especially managers</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"B-IAP/#incorporating-inclusiveness-into-your-workflows","title":"Incorporating inclusiveness into your workflows","text":"<p>The structure of your workflows shape the application you are delivering. By explicitly incorporating accessibility and inclusiveness throughout your  design and development pipeline, you are making sure that you and your team are actively working towards an application that will be usable and welcoming to everyone.</p> <p>Accessibility and inclusiveness are complex topics that can be tricky to incorporate into your structure's habits and processes, especially with varying team compositions and scales. As small structures have less time and lighter processes, heavy accessibility workflows as used at industrial scale are likely not to be compatible with your structure if you are a small team building FOSS (Free and Open Source Software).</p> <p>But this agility can be used at your advantage by picking and choosing some practices that might fit the way your work. In this module, we'll cover some practices you can adopt and brainstorm together on the ways we could incorporate inclusiveness into your workflows.</p>"},{"location":"B-IAP/#accessibility-and-inclusiveness-essentials","title":"Accessibility and inclusiveness essentials","text":"<p>In this section, we'll cover essential steps towards an inclusive app.</p> <p>1. Have inclusiveness in mind since the ideation</p> <p>When coming up with a new feature for your app, ask yourself: what are some possible accessibility and inclusiveness challenges for that user experience? Are there elements we can anticipate from the design?</p> <p>2. Make it a goal for your designs</p> <p>Good design is inclusive. And good design benefits everyone. To get concrete insights about what's an inclusive design, check out the \ud83c\udfa8 Inclusive design 101 module.</p> <p>3. Iterate on implementation</p> <p>Inclusiveness is a process. You will probably not get it right the first time. Testing and tweaking the experience until you reach a result you are satisfied with can take time.</p> <p>We provide some detailed implementation advice in \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101.</p> <p>4. Test</p> <p>Testing is a crucial part in the process of making a feature inclusive. Refer to the \ud83e\udd3a Developer stance &amp; user collaboration module for considerations on how to get feedback from testers.</p> <p>5. Get user feedback</p> <p>Getting user feedback is essential, especially when it comes to accessibility and inclusiveness. This can be done by actively requesting community feedback. Additionally, we highly recommend creating an issue template for accessibility, and encouraging users and developers to create them when encountering an issue. This will nudge the whole team to regularly pick up those issues, once they're in the backlog.</p>"},{"location":"B-IAP/#having-an-inclusivenessaccessibility-coach","title":"Having an inclusiveness/accessibility coach","text":"<p>With this in mind, how do we make sure that these steps are taken? While there are many ways, one is given in the Agile Accessibility Handbook.</p> <p>The author suggests that every team has their accessibility coach. This person should be especially knowledgeable and empathetic regarding accessibility, but is not required to be an expert nor to work full-time on the subject. They will not be doing all of the accessibility work. Rather, they are the ones who monitor with other developers the progress of the current accessibility roadmap. Even if your structure has a product manager who is willing to do this job, the accessibility coaches can also have a great impact by bringing knowledge on how to architecture accessibility on their platform. They are the one responsible of making sure that accessibility is a constant thought through every step of development within their team.</p> <p>The coaches of every team can meet regularly with the product manager (if there is one) to coordinate and update the accessibility roadmap of the application. They also can organize monthly meetings with all of their teams to report on the improvements, blockers and perspectives. The main goal is to normalize accessibility and inclusiveness as routine parts of development.</p>"},{"location":"B-IAP/#building-empathy","title":"Building empathy","text":"<p>Empathy is an absolute requirement for your team to get involved in the process of making your application inclusive. As stated in \ud83e\udd3a Developer stance &amp; user collaboration, we all have a singular, partial perspective of the world. These comes with biases but also insights and experiences. It's likely that most persons working in your structure will have limited living experiences of disability. This can lead to an \"empathy gap\" (as called in Barrell's book) where accessibility and inclusiveness feel like remote and niche preoccupations. Therefore, it's crucial to build empathy by helping workers to embrace diversity.</p> <p>This can be done by discussing with diverse users and experts, regularly communicating internally on the subject (for example, by sharing stories of users who took advantage of the inclusiveness of your app) or by hosting events where team members can try and use your app with assistive technologies or simulated disabilities, and reflect on what could be improved.</p> <p>One good story to start building empathy can be the one of Jill, told by her friend Ashley Shew.</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>When I was in grad school, before I was disabled, I made great friends with my fellow student Jill. I didn\u2019t think of myself as disabled, and it would be another ten years before I would be diagnosed as having Crohn\u2019s disease, but I was already having intermittent issues with inflammation and flares of symptoms that didn\u2019t really make sense together yet. She was a paraplegic wheelchair user. She passed away over a decade ago now, but back then, we hung out with a larger group from our cohort, and Jill and I got along especially well. We had classes together, occasionally shopped together, and she\u2019d invite us all to her apartment for group hangs. She was originally from New Jersey but had moved to New Mexico, where the climate was better for her. She loved New Mexico. She was just away to earn a master\u2019s degree: two years in our program in Virginia, then she planned to return home to New Mexico to teach. She was full of jokes, and it was easy to be with her.</p> <p>On our campus, disability accessibility was . . . shitty, to say the least. And she was the first physically disabled person whose experience I could really see clearly every day, since we were in so many activities together. I remember the long routes we had to take to avoid stairs. I was lucky to be in a ground-floor apartment, so she could occasionally visit where I lived, though the bathroom door was too narrow, so visits weren\u2019t terribly long. Her own home wasn\u2019t ideal either. She had very little choice over what apartment she could move into\u2014so many fewer options than I had. And the apartment she ended up in wasn\u2019t even truly accessible. It had a bathroom with an appropriate sink and toilet, but the shower wasn\u2019t great, and the kitchen was just the same standard kitchen that was in all the apartments in the complex, so she had to be creative. The apartment complex itself was kind of a dump\u2014filled with undergraduate students and close to campus. The parking lot was always overfilled on football game days. On one of those days, we were going to hang out, and then she was going to go over to the library for an event. I drove over, found a parking spot way out in some grass, and trekked over to her apartment.</p> <p>Jill was on the phone when I got there. Someone had parked next to her giant white van in the yellow-slashed area that is the open zone next to her disability parking spot. She could neither get to the side of her van to get in nor open the door to allow the van\u2019s wheelchair lift to fold out. The van was set up for her, with no seat on the driver\u2019s side since she\u2019d be in her wheelchair, so I couldn\u2019t simply back it out for her to get in. (It was set up for someone like her, but not her, actually. She considered herself very lucky to get a secondhand wheelchair-accessible van like this; it had been set up and driven by a different person with a similar disability. A new van would have been way out of a reasonable range of cost, and the secondhand van was still pricey.) She had already called the apartment complex once that day. Although the complex had signs all around the lot saying that it would tow away non-resident cars (which this one was!), it was game day, so they didn\u2019t want to call a tow company. They said they couldn\u2019t do anything and told her to call the police. She called the non-emergency police line, and they said it was the domain of her apartment complex. And it was game day after all, so the police were busy too. She was shuttled back and forth like a tennis ball. No one was going to do anything.</p> <p>I was outraged. Why should my friend be kept home all day because someone decided to park where they shouldn\u2019t? What if there had been an emergency of some sort for which she\u2019d needed her van? Didn\u2019t they know that disabled people had places to go?</p> <p>Jill wasn\u2019t pleased either, of course, but this wasn\u2019t her first time hitting walls with access. I was na\u00efve to be so mad. She encouraged me to let the air out of the car\u2019s tires. I regret that I was too much of a wuss at age twenty-three to actually do it. We already knew the police weren\u2019t going to come about the car, so why didn\u2019t I? Often, past me disappoints my currently disabled self.</p> <p>I think of all the infrastructure that failed here\u2014that was really built to fail, because it was never built to consider disabled people. It did the bare minimum: the physical complex (and administrators, and the police) met a few legally required standards, but they did not actually enforce the civil-rights law that is the Americans with Disabilities Act (ADA). Few complexes met even the lowest bar, so her housing options were limited\u2014she was glad to even get that dumpy, inconvenient apartment. The systems in place supposedly to give her equal access\u2014including her leasing office and the police\u2014were indifferent to actually ensuring that she had it. Jill missed the event she said she\u2019d help with at our library. Turned out she was accustomed to these system failures. At least that day wasn\u2019t a failure with life-or-death stakes, like the ones that would delay her access to gynecological care and ultimately lead to her death less than two years later.</p> <p>Info</p> <p>If you have examples of (whether success or failure) stories related to the app the trained team is building, it can be added to complement Jill's story and start extending this empathy to software development. If you have stories you would like to share publicly, feel free to contribute.</p> <p>Reflect on this story with the trainees.</p> <ul> <li>What should and could have been done differently by the institutions and engineers implicated?</li> <li>How does that translate to software accessibility? What can be the impact of poor accessibility and inclusiveness on your own users?</li> <li>What does that tell about the stance to adopt as an app builder?</li> </ul>"},{"location":"B-IAP/#wrapping-up","title":"Wrapping up","text":"<p>At the end of the day, incorporating inclusive practices to your workflows really comes down to trying what works best for your team, picking and choosing some ideas that organizations use daily.</p> <p>If you want to learn further on this topic, the Agile Accessibility Handbook mentioned previously is a very solid starting point, tackling big picture transformation processes as  well as small-scale team practices.</p>"},{"location":"B-IAP/#sources","title":"Sources","text":"<p>Barrell, Dylan. Agile Accessibility Handbook. Amplify Publishing, 2020.</p>"},{"location":"B-INO/","title":"\ud83d\udd2d Inclusiveness needs overview","text":"<p>In this module</p> <p>This module aims at giving the trainees an overview of the most common accessibility needs their users could have.</p> <p>\u26f3\ufe0f Section: B. From accessibility to inclusiveness</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"B-INO/#when-to-use","title":"When to use","text":"<p>This module should be used once the trainees have a basic understanding of what accessibility means. It shows the trainees more concrete examples of accessibility and inclusiveness challenges.</p>"},{"location":"B-INO/#main-disabilities-to-account-for-in-software","title":"Main disabilities to account for in software","text":"<p>Below are the main disabilities you will need to directly take into account when building software. Keep in mind that disability is not a binary state but rather refers to a wide variety of living experiences, and that a lot of users experience multiple disabilities at once. Consequently, this list should not be seen as exhaustive.</p>"},{"location":"B-INO/#low-vision-and-blindness","title":"Low vision and blindness","text":"<p>Visual impairment affects up to 17% of users, according to Microsoft. These visual impairments range from low-vision to blindness. Therefore, it is crucial that your application meets legibility standards regarding font sizes (which should be adjustable at least from the system settings) and contrasts, and also supports assistive technologies like screen-readers or braille displays (requiring keyboard support for desktop apps).</p> <p>Here is an example of navigation between elements navigated using an assistive technology, like a screen reader.</p> <p>Fortunately, because of the way OSes and assistive technologies function, making an app accessible to screen readers should make it mostly accessible to others. While supporting screen readers will likely represent an important investment, the impacts of this work are very rewarding.</p>"},{"location":"B-INO/#hearing-impairments","title":"Hearing impairments","text":"<p>18% of users are hearing-impaired according to Microsoft. For more specific information on their needs, you can check the How to Meet WCAG (Quick Reference) of the W3C. You will mostly need to provide redundant access to all auditive information. This can be for example a visual notification accompanying a sound, or real-time subtitling like the Whisper Transcript plugin for Jami.</p>"},{"location":"B-INO/#motion-sickness","title":"Motion sickness","text":"<p>Some users will experience motion sickness when exposed to animations or visual effects. You should be aware of that, providing them with solutions for a less triggering experience. Known triggers include:</p> <ul> <li>Zooms</li> <li>Flashing or blinking</li> <li>Animations playing automatically without user interaction</li> <li>Parallax effects</li> </ul> <p>Common solutions include buttons to pause animations, using OSes APIs to detect if reduced motion is enabled, limiting flashing elements when possible, etc.</p>"},{"location":"B-INO/#color-blindness","title":"Color blindness","text":"<p>Can you guess what is the accessibility issue in this screenshot from the Jami desktop app?</p> <p>Some colorblind users would not have any way of identifying the presence status of the user as it's only communicated through a colored dot. In Jami, this is partially fixed by having a tooltip indicating the presence status of the user.</p> <p>Color blindness is typically less thought of. Making your UI accessible to people who experience this disability is straightforward: make sure your UI doesn't rely on color elements alone to convey information. For example, if a colored dot indicates whether a user is connected or not, it should be accompanied by a textual label or an icon.</p>"},{"location":"B-INO/#cognitive-impairments","title":"Cognitive impairments","text":"<p>Cognitive impairments affect 16% of users. Consequently, it is crucial for designers to take these into account. Accessibility can be improved for this demographic by allowing for highly customizable applications and UIs, allowing for simplification, hiding of some elements, etc, so that users can have the app tailored to their specific needs.</p> <p>In \ud83d\udc69\u200d\ud83e\uddbd Accessibility &amp; Ableism we saw a quote of Ashley Shew showcasing how Discord became a welcoming place for many autistic people.</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>Awni mentioned Discord as a social platform \u201ceasily adapted by autistic users to facilitate autistic-styled communication due to its flexibility both with custom emotes and for purpose-centric server organization.\u201d Gardiner pointed to the importance of letting autistic people lead tech conversations with what they want and how they want to do things. This doesn\u2019t mean jumping in to teach autistic people to play games in the way allistic people do but rather letting the \u201cnothing about us without us\u201d lesson of the disability rights movement carry into this space: to learn from autistic people how to use spaces autistically.</p>"},{"location":"B-INO/#motor-disabilities","title":"Motor disabilities","text":"<p>Affecting up to 19% of users, many people can have difficulties using a phone, a keyboard or a mouse. They often have alternative input devices like switches or audio controlling. You must take them into account when designing your user experience (UX).</p> Accessibility switch"},{"location":"B-INO/#speech-or-language","title":"Speech or language","text":"<p>Speech or language-related disabilities can take various forms ranging from dyslexia, illiteracy or elocution difficulties. Some of the solutions will include speech-to-text features, support for custom typefaces like Open Dyslexic and spell-checkers.</p>"},{"location":"B-INO/#additional-needs-and-factors-to-take-into-consideration","title":"Additional needs and factors to take into consideration","text":"<p>In the \ud83c\udfa8 Inclusive design 101 module we will develop further the intersectional needs to take into account. Before that, here is a non-exhaustive list of human characteristics to keep in mind in order to try and include as many user as possible:</p> <ul> <li>Age</li> <li>Culture</li> <li>Digital literacy</li> <li>Education</li> <li>Ethnicity</li> <li>Gender, gender identity</li> <li>Historical context</li> <li>Language</li> <li>Mental health</li> <li>Nationality</li> <li>Physical and cognitive (dis)abilities</li> <li>Sexuality</li> <li>Socio-economic context</li> </ul> <p>Tip</p> <p>You need to consider the intersections of all of those categories as well as the disabilities listed previously in the first section of this module.</p> <p>Realistically, you cannot predict and account perfectly for all of those characteristics, because they are spectrums rather than fixed labels. The best you can do, is actively seek and listen to feedback from diverse user groups, and make sure your team is as diverse as possible.</p> <p>Some of the tools that we will share later in this training should still help you go through the main accessibility and inclusiveness elements when designing and developing.</p>"},{"location":"B-INO/#sources","title":"Sources","text":"<p>Microsoft, Accessibility (Design basics)</p> <p>W3C, How to Meet WCAG (Quick Reference)</p>"},{"location":"B-WDU/","title":"\ud83e\udec2 We are all disabled and unique : accessibility, plurality and intersectionality","text":"<p>In this module</p> <p>We will explore the concepts of intersectionality and inclusiveness and its use in software development.</p> <p>\u26f3\ufe0f Section: B. From accessibility to inclusiveness</p> <p>\ud83d\udc65 Audience: Designers</p> <p>\u23f1\ufe0f \ufe0fDuration: 30'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"B-WDU/#when-to-use","title":"When to use?","text":"<p>This module is necessary to deconstruct the idea that accessibility is merely about designing for users who can't see or hear.</p>"},{"location":"B-WDU/#inclusiveness-and-co-creation","title":"Inclusiveness and co-creation","text":""},{"location":"B-WDU/#who-is-disabled","title":"Who is disabled?","text":"<p>Since the beginning of this training, we have been referring to the disabled people in the 3rd person, as if they were \"others\". The truth is, some of us writing this are disabled, some of you reading this are, as we all will be some day. The barrier between the able-bodied and the disabled is a lot more porous than we could think at first glance.</p> <p>Many people who think themselves as able-bodied use the zoom feature in order too have bigger text. People who have a hard time using new technology are also a core target for accessibility features, like simplified UI.</p> <p></p> <p>The line blurs further once we realize that accessibility features are useful to everybody no matter what. VIM users are the first ones to profit from good keyboard navigation. Many people use subtitles on a daily basis when commuting. Mobile \"gesture typing\" started out as an accessibility feature.</p> <p>While this convenience for some is surely necessary for others, we can appreciate that these categories - disabled and able-bodied - are rather arbitrary and that no clear boundary can be drawn.</p> <p>Therefore, it's crucial to not think disabled peoples as a minority but rather as the living diversity in which we all evolve.</p>"},{"location":"B-WDU/#what-is-inclusiveness","title":"What is inclusiveness?","text":"<p>The Cambridge dictionary would define inclusiveness as:</p> <p>Cambridge dictionary</p> <p>the quality of including many different types of people and treating them all fairly and equally</p> <p>Inclusiveness is a core concept when talking about diversity. It's often a preferred term to accessibility that is rather limited to the inclusion of people with disabilities. It highlights that we need to be designing and programming not only for accessability but also for the ever-varying pluralities of human experiences and discriminations. In simpler words, not being ableist is not enough. We must make sure that we are also not perpetuating other kinds of oppressions. For example, using gender-neutral language and icons when referring to a user, and not having fixed first and last name fields can help people from various backgrounds feel welcome in the space you are creating with your app.</p> <p>While keeping this in mind represents an important leap in inclusiveness of your product, understanding how discriminations are related to each other is crucial to being inclusive and understand your users. There is no inclusiveness without intersectionality. That is why the rest of this module will be dedicated to it.</p>"},{"location":"B-WDU/#intersectionality-and-plurality-of-experiences","title":"Intersectionality and plurality of experiences","text":""},{"location":"B-WDU/#what-is-intersectionality","title":"What is intersectionality?","text":"<p>In Mapping the Margins: Intersectionality, Identity Politics, and Violence against Women of Color, Kimberle Crenshaw defines intersectionality to address an issue she encountered as an jurist in the late 80\u2019s in the US. When filling in cases about discriminations in work environment, lawyers must select the discrimination that their client is facing (for example, racism or sexism).</p> <p>This is where Crenshaw had a problem: some of her clients were black women, whose cases were dismissed because their employer had hired white women and black men, and therefore could protect themselves from accusations of sexism or racism.</p> <p>That is why Crenshaw defined intersectionality as a framework for understanding specific living experiences of people situated at the intersection of discriminations and privileges. In her case, that was to showcase the specific oppression that black women lived, that could not be explained by sexism and racism. The intersection of the \u201cblack\u201d and \u201cwomen\u201d oppressions produced a new specific one, different of the addition of the two.</p>"},{"location":"B-WDU/#intersectionality-in-software","title":"Intersectionality in software","text":"<p>What do we need the concept of intersectionality for in software development?</p> <p>It\u2019s actually very useful, for two main reasons!</p> <ul> <li> <p>The proportion of users with disabilities who happen to have more than one is important (17.7% in 2016). Thinking about designing for one disability leaves out a blank spot for users having that disability but also other conditions. For example, deaf users with low vision are often overlooked when thinking about accessibility. We will take a closer look at the appropriate stance to account for diversity in Developer stance &amp; user collaboration</p> </li> <li> <p>It\u2019s a common bias to forget that disabled people are not just disabled, but first and foremost people with their own unique life experiences and specificities. We need to think about women who rely on wheelchairs, LGBTQIA+ people who don't speak the language of the country they live in, blind users who can't afford an iPhone - and those who are all of that at once!</p> </li> </ul> <p>Certain issues only arise for people with a specific intersectional background.</p> <p>Take for example this main account creation page. Can you guess what kind of users can have trouble with it?</p> <p></p> <p>This one was hard and required a lot of intuition. The \"user interface language\" label and the actual combo box looks like two separate elements, because they are, making them inaccessible as is with keyboard navigation. If you speak a niche language and are low vision you cannot access the combobox to change it to a language that you speak.</p> <p>Therefore, a low vision, english speaking user will not encounter any issue on this page and might consider it totally accessible while a non-english speaking one will encounter issues navigating it.</p> <p>This can be fixed by adapting to your system language dynamically.</p> <p>Another intersectional example is presented to us by Apple in their The practice of inclusive design video. They encountered this issue when developing a system capable of automatically generate descriptions of images for low vision users using a generative AI models. Can you guess what it is?</p> <p> The accessible text of the previous image of this page (the account creation page) as seen in the markdown</p> <p>The model generating descriptions had the tendency to assign gender to people on the images it was captioning, therefore regularly misgendering cis, trans and especially non-binary people. This issue encountered by those at the intersection of the low vision and queer community prevented them from affirming their identity and feel welcome.</p> <p>The solution that Apple chose to adopt was to train their model to concentrate on other elements of an image, like the clothes that a person is wearing, their facial expression or where they are standing. By avoiding oppressive biases, the model ended up being better for all users.</p>"},{"location":"B-WDU/#resources","title":"Resources","text":"<p>The schematic of disability perception in an editable form</p>"},{"location":"B-WDU/#sources","title":"Sources","text":"<p>Crenshaw, Kimberle. \u201cMapping the Margins: Intersectionality, Identity Politics, and Violence against Women of Color.\u201d Stanford Law Review, vol. 43, no. 6, 1991, pp. 1241\u201399.</p> <p>Kohzuki M. Multimorbidity and Multiple Disabilities: Present Status and the Roles of Rehabilitation. J Clin Med. 2024 Oct 23;13(21):6351.</p> <p>Apple. \"The practice of inclusive design\". Accessed the 17 July 2025</p> <p>Cambridge's dictionary's definition of inclusiveness</p>"},{"location":"C-IDD/","title":"\ud83d\udda5\ufe0f Inclusive design for Desktop","text":"<p>In this module</p> <p>This module contains the basics of accessible and inclusive design for Desktop.</p> <p>\u26f3\ufe0f Section: C. Designing inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Designers</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: \ud83c\udfa8 Inclusive design 101, \ud83d\udd27 Inclusiveness technologies : Desktop</p>"},{"location":"C-IDD/#when-to-use","title":"When to use ?","text":"<p>Use this module right after reading \ud83c\udfa8 Inclusive design 101 if you're designing applications for Desktop. It will give you insights on how to adapt those generic principles to your platform.</p>"},{"location":"C-IDD/#what-are-the-resources","title":"What are the resources ?","text":""},{"location":"C-IDD/#and-why-are-there-so-few-of-them","title":"...And why are there so few of them ?","text":"<p>Searching the web for resources on applicative desktop accessibility and inclusiveness guidelines will probably left you unsatisfied and confused as you will liked be overwhelmed by resources and testing tools for web accessibility and none for Desktop applications.</p> <p> </p> <p>This phenomenon is not limited to the first internet search, there is a flagrant lack of accessibility resources for desktop applicative design and development. Indeed, this is one of our motivations for the creation of this training. While on mobile, most of the accessibility features are native to the OS, and therefore documented, desktop accessibility relies much more on third party tools and framework-specific implementation.</p> <p>This lack of resources while due to multiple factors can largely be attributed to a simple reason: the number of people who need to create and deploy a website is so enormous that it is a completely different scale than the number of persons that need to develop a native desktop application. This has been further accentuated by the rise of web-based native frameworks like Electron.</p> <p>Therefore, the few resources publicly available on desktop applicative accessibility are often made by the operating system maintainers themselves. You can find the Accessibility overview of Microsoft for Windows, the one for Apple platforms or a list of accessibility tools for Linux. Those greatly vary in quality and usually doesn't go much deeper than \"disabled users should be able to use your app\", listing disabilities and features without guidance on how to implement for them.</p> <p>How to deal with contextual elements, different panes, complex UI elements that you typically don't find on a web page ? Those questions often remain unanswered. We don't have answers to all of those. Working on applicative accessibility is not memorizing a fix set of rules to apply but rather learning how to find relevant solutions to problems you encounter. Therefore this module should provide you with the tools and information needed to resolve the issues that you will encounter.</p>"},{"location":"C-IDD/#the-wcag-standard","title":"The WCAG standard","text":"<p>A useful resource to help you design accessibility for your Desktop app is one that isn't made for applications: The Web Content Accessibility Guidelines (WCAG). It aims at providing shared worldwide accessibility guidelines for web content. It's therefore really extensive.</p> <p>While some of its content doesn't apply directly to native applicative design (for example aria labels are only a web concept), there is still a lot that we can learn from the WCAG. We especially recommend to use the How to Meet WCAG (Quick Reference) from the Web Accessibility Initiative. It provides you with examples of successful and unsuccessful designs for every WCAG guideline and is sorted by topic. For example, you can simply navigate to the \"1.4.1 Use of color section\" and see the list of guidelines related to this point.</p> <p></p> <p>You can then check the techniques and failures for this point as well as well documented solutions for each of them. Here is one of the examples given for use of color.</p> <p></p>"},{"location":"C-IDD/#designing-for-keyboard-usage","title":"Designing for keyboard usage","text":"<p>Keyboard usage is a key aspect of designing for Desktop applications. A lot of users don't use a mouse for various reasons. While for some of them, this is a preference, you should keep in mind that most vision-impaired users will not use a mouse as it can be very unreliable without a visual indicator (try using your mouse with an invisible cursor to get a sense of what it would feel like).</p>"},{"location":"C-IDD/#keyboard-navigation-what-each-key-should-do","title":"Keyboard navigation (what each key should do)","text":"<p>Keyboard navigation can be a bit tricky. Most resources you can find on accessibility only tell you that elements should be usable with a keyboard but not what combination of keys is intuitive to navigate it. In reality there are five main types of keyboard inputs. Implementing those inputs properly will make your application usable with a keyboard.</p>"},{"location":"C-IDD/#tab-backtab","title":"Tab &amp; Backtab","text":"<p>The Tab and Backtab (Shift+Tab) keys are the main ways of navigating through the UI. Pressing it should respectively send the focus to the next and previous focusable elements of the UI. It should not be used to navigate through the elements of a list or focused static text. The static text should still be accessible in the label of an associated element.</p>"},{"location":"C-IDD/#the-arrow-keys","title":"The arrow keys","text":"<p>The up and down arrow keys are used to navigate inside an element. For example, while pressing tab would focus and then exit a list, the arrows should be used to navigate inside of the said list.</p>"},{"location":"C-IDD/#enter","title":"Enter","text":"<p>The enter key is quite straightforward. It should act as if you were clicking on an element. In some contexts it can be used to close informative popups as an alternative to the escape key.</p>"},{"location":"C-IDD/#escape","title":"Escape","text":"<p>The escape key is supposed to close popups and dropdowns. Having it broken is a common problem in many applications. This is what we call a \"focus trap\"; when an element takes focus without any way for a keyboard user to make it release it. Having the escape key working properly is absolutely necessary to making your application keyboard-accessible.</p>"},{"location":"C-IDD/#alt","title":"Alt","text":"<p>The alt key has two main purposes. Firstly it should close and escape fields where tab inputs would be absorbed (some text inputs for example). Secondly it should focus the menu attached to the top of an application. Here is an example in VSCode.</p> <p></p>"},{"location":"C-IDD/#shortcuts","title":"Shortcuts","text":"<p>Your application is now usable with a keyboard, but you shouldn't be content with usability. You should be designing you app to be fun and fluid, not just \"usable\". Keyboard shortcuts are the key to achieving that. They make it unnecessary to circle though all the elements with Tab inputs. Indeed, someone used to the shortcuts of an application can operate it much faster than one with a mouse.</p> <p>Here you can see an example of the keyboard shortcuts usable during a call in Jami.</p> <p></p>"},{"location":"C-IDD/#resources","title":"Resources","text":"<p>Web Accessibility Initiative. How to Meet WCAG (Quick Reference)</p>"},{"location":"C-IDD/#sources","title":"Sources","text":"<p>Microsoft. Accessibility overview for Windows</p> <p>Apple. Developing accessible apps</p> <p>JP Schnapper-Casteras &amp; Janet Hopkins. Current Work on Linux Accessibility, 2004</p>"},{"location":"C-IDE/","title":"\ud83c\udfa8 Inclusive design 101","text":"<p>In this module</p> <p>This module aims at giving accessibility and inclusiveness essentials for app design.</p> <p>\u26f3\ufe0f Section: C. Designing inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Designers</p> <p>\u23f1\ufe0f \ufe0fDuration: 30'</p> <p>\ud83d\udcda Prerequisites: \ud83e\udec2 We are all disabled and unique</p>"},{"location":"C-IDE/#when-to-use","title":"When to use?","text":"<p>This module should be used with trainees who are in position of making design decisions for the product they are working on. It is mostly intended for product designers and managers, but it is relevant in some scenarios to also include developers, especially for smaller teams.</p>"},{"location":"C-IDE/#what-is-an-inclusive-app","title":"What is an inclusive app?","text":"<p>Using the Cambridge dictionary's definition, we defined inclusiveness as the quality of including many different types of people and treating them all fairly and equally. From there, we have to ask ourselves: what is an inclusive app?</p> <p>Put simply, we can define an inclusive application as one that can not only be used completely, comfortably and safely by all users, but also in which they can all thrive, feel welcome and express themselves.</p> <p>It is thus crucial for designers and product leads to always keep in mind that the features, contents and interfaces they design won\u2019t be seen, understood, felt or interacted the same by users, depending on the plural and dynamic human characteristics that structure their representations and interactions with their environment.</p> <p>Making an inclusive app is thus taking care of everyone, including minorities.</p> <p>For every feature, every interface, every content that you are building, always ask yourself: is this element inclusive? Are there human characteristics that could prevent a user from understanding, interacting, or even feeling well with the provided content?</p> <p>As seen in \ud83d\udd2d Inclusiveness needs overview, here is a non-exhaustive list of human characteristics to keep in mind in order to include as many people as possible:</p> <ul> <li>Age</li> <li>Culture</li> <li>Digital literacy</li> <li>Education</li> <li>Ethnicity</li> <li>Gender, gender identity</li> <li>Historical context</li> <li>Language</li> <li>Mental health</li> <li>Nationality</li> <li>Physical and cognitive (dis)abilities</li> <li>Sexuality</li> <li>Socio-economic context</li> </ul> <p>Though these categories can be useful to get an idea of common characteristics often leading to discrimination, we should not see them as a checklist of requirements to be accessible.</p> <p>Moreover, human experiences are complex and evolving as they always emerge from intersections of those characteristics.</p> <p>Consequently, building an inclusive app is all about staying up to date and actively open to feedback, knowing that we can never reach perfect inclusiveness while doing our best to get there.</p>"},{"location":"C-IDE/#designing-for-inclusiveness","title":"Designing for inclusiveness","text":"<p>While implementation plays an important role in the inclusiveness, and especially the accessibility of applications, the designers and product leads hold an important responsibility in the process of building an experience that will resonate and be welcoming to the widest range of users possible.</p> <p>Product design documents, including specifications, user stories and prototypes act as the team\u2019s compass for delivering awesome products. That is why having inclusiveness in mind from the design is absolutely essential. You don\u2019t ever have to \u201cmake this feature accessible\u201d if it is built from the ground up with inclusiveness in mind.</p> <p></p> <p>You can see on this picture a bridge that, at first, might seem ordinary. Can you guess what\u2019s wrong with it? In Do artifacts have politics?, Langdon Winner explains that those bridges on Long Island were built low, so that buses were too high to pass them. Therefore, people who did not have a car - the least wealthy, and especially African-Americans - were denied access to the parkway to the public beaches. A technical segregation.</p> <p>And the same goes with software: if a messaging app denies access to some features to groups of users, it excludes them by preventing them to connect.</p> <p>Designers can have a great impact on the inclusiveness of their product. By keeping in mind that their design choices always impact someone somewhere, and likely whole communities - or intersection of them - it is possible to shape tools that strive to respect and acknowledge diversity, which is as the core of humanity and empathetic design.</p>"},{"location":"C-IDE/#what-is-an-inclusive-user-interface-iui","title":"What is an Inclusive User Interface (IUI)?","text":"<p>An important part of making an app inclusive is to make the UI as accessible to the widest range of people as possible.</p> <p>As we said earlier, we ideally don\u2019t \u201cmake an interface accessible\u201d. Rather, we design interfaces to be accessible, so that they support as many ways as possible of interacting with your app.</p> <p>Alternative, underlying UIs that are built for \u201cdisabled\u201d people are often referred to as Accessible User Interfaces (AUI), sometimes as accessibility tree. At first, this concept seems very useful, because thinking of accessibility this way pushes us to make intended and meaningful design choices for how our apps should be accessed using various assistive technologies, font sizes, settings, etc, and to think of accessibility with a wider approach than just adding labels to buttons. It\u2019s about designing a whole new UI - an AUI, separate from the one most users will use.</p> <p>That said, from our perspective, thinking UI and AUI as two distinct interfaces does not make sense, because:</p> <ul> <li>Most users never access an app using only the UI or the AUI. For example, someone who can see but cannot touch the screen might use a switch as input but still use the visual interface to perceive the content. Moreover, many people considering themselves as \u201cable-bodied\u201d still use some accessibility features on their devices - like custom font sizes or accessibility gestures used by power users.</li> <li>As seen in We are all disabled and unique: accessibility, plurality and intersectionality, thinking of users as people working with various sets of abilities rather than belonging to one of the \u201cdisabled\u201d or \u201cable-bodied\u201d categories better reflects the wide range of experiences you are inevitably creating when building your app.</li> <li>AUI as a concept completely forgets inclusiveness and intersectionality, as it draws a strict line between the \u201cable-bodied\u201d and the \u201cdisabled\u201d.</li> <li>AUI can also create a pitfall, pushing developers to create the UI first, and then deriving an AUI from it, which makes the concept unhelpful.</li> </ul> <p>We thus prefer to think an inclusive user interface (IUI) as a whole UI that maximizes the different ways it can be interacted with, in order to allow the greatest variety of particular experiences and to satisfy as many needs as possible.</p> <p>From a designer\u2019s perspective, this means your interface should embed a wide set of equal ways of interacting with your app.</p> <p>In his book, Rob Whitaker cites The Paciello Group who \"helped define the seven principals of inclusive design\" which you can find a very valuable detailed explanations and examples here. From that same website, here is a short definition of each principle:</p> <ul> <li>Provide comparable experience: Ensure your interface provides a comparable experience for all so people can accomplish tasks in a way that suits their needs without undermining the quality of the content.</li> <li>Consider situation: People use your interface in different situations. Make sure your interface delivers a valuable experience to people regardless of their circumstances.</li> <li>Be consistent: Use familiar conventions and apply them consistently.</li> <li>Give control: Ensure people are in control. People should be able to access and interact with content in their preferred way.</li> <li>Offer choice: Consider providing different ways for people to complete tasks, especially those that are complex or non standard.</li> <li>Prioritize content: Help users focus on core tasks, features, and information by prioritizing them within the content and layout.</li> </ul> <p></p>"},{"location":"C-IDE/#designing-an-iui","title":"Designing an IUI","text":"<p>Now, how do you concretely make an IUI?</p> <p>It is important to know that there is no unique way of designing inclusive interfaces, and that it is a slow and continuous work, rather than a one-time effort. Inclusiveness recommendations can never be exhaustive.</p> <p>With that said, here is a non-exhaustive list to start with to make your app more inclusive:</p>"},{"location":"C-IDE/#the-colors-are-contrasted","title":"The colors are contrasted","text":"<p>The most common and easiest to apply advice that is given to designer is to make sure the colors they use are contrasted. This is important not only for people who are colorblind or use a screen filter, but also to guarantee readability on as many screens and conditions as possible. Many tools like Figma plug-ins or websites can help you check if your colors are well contrasted, or even look for contrast errors in your designs.</p>"},{"location":"C-IDE/#the-colors-are-not-necessary-to-understand-the-ui","title":"The colors are not necessary to understand the UI","text":"<p>Colors are a great way to quickly convey information. Nevertheless, some people can\u2019t or prefer not to rely on colors to identify content. Consequently, informations given by the UI should never only be conveyed through colors. For example, to indicate success of an operation using a green circle is not accessible. Rather, consider using a pictogram that will also be understandable without needing to see colors.</p>"},{"location":"C-IDE/#the-layout-is-responsive-to-custom-font-sizes","title":"The layout is responsive to custom font sizes","text":"<p>Some people need or prefer having on their devices custom (typically bigger) font sizes. When applications are not designed or implemented with this adaptability in mind, content can be hidden and the app can become unusable.</p> <p>There usually is not pre-made answer on how to adapt the UI, but the issue can typically be solved by working on an alternate layout. For example, a common fix for cropped content (especially text) is to conditionally replace de horizontal stacks by vertical stacks, saving horizontal room for the text.</p> <p>A lot of implementation frameworks provide easy ways to set a preferred size for an element, providing adaptation for scaling change.</p>"},{"location":"C-IDE/#the-text-is-naturally-justified","title":"The text is naturally justified","text":"<p>Making sure your text is naturally justified (to the left or to the right depending on your language) is important for two reasons: - Users relying on a magnifier tool to read can miss text that doesn't start on the natural side of the screen. - Full justification makes it harder read for some people with cognitive disabilities.</p>"},{"location":"C-IDE/#the-interactions-do-not-require-physical-andor-motor-abilities","title":"The interactions do not require physical and/or motor abilities","text":"<p>Here are some elements to keep in mind to achieve this milestone:</p> <ul> <li>Timeouts should be avoided as often as possible.</li> <li>Providing shortcuts (whether they are through keyboard or other accessibility APIs depending on the platform) can make the interface faster and easier to use.</li> <li>Error tolerance is also very important, as people with tremors have a higher risk of mistapping or misclicking elements. In general, and particularly for destructive actions, asking for confirmation or allowing for cancellation is very important.</li> <li>Preventing confidential elements to appear on the screen spontaneously is crucial to protect the privacy of everyone, including people whose screen is typically more exposed, particularly wheelchair and phone holder users.</li> <li>Eventually, an essential part of making your app inclusive to people with physical motor disabilities is to make the interface nice to use with assistive technologies in general, as they often rely on these.</li> </ul>"},{"location":"C-IDE/#the-content-can-be-accessed-using-assistive-technologies","title":"The content can be accessed using assistive technologies","text":"<p>Designing for assistive technologies can be challenging when you don't know where to start from. In this section, we'll walk through simple steps that will get you started.</p> <p>1 - Grouping the elements</p> <p> For people who use screen readers and/or the keyboard to navigate your app, it is crucial to have the information grouped at the right level of granularity.</p> <ul> <li>If the information is too fragmented, navigating will be slower (as it will need more user inputs) and context might be lost (as the logical link between elements will not be given for people who can\u2019t see the information hierarchy on the screen).</li> <li>If the information is grouped at a higher level than it should, navigating to a specific element will be harder and interactions will likely be more complicated due to the fusion of actions.</li> </ul> <p>While it certainly depends on the experience you are building and the platform you are targeting with your design, some good practices to start grouping your elements are:</p> <ul> <li>Elements that make a contextually atomic group, i.e. a group of elements for which we lose context if they are separated, must be grouped.</li> <li>Elements that share the same primary action are typically grouped. Elements that have a diverging primary actions should not be grouped, unless you can elect one primary action and demote the other to secondary.</li> <li>Each element of a collection view should be a group.</li> </ul> <p>Mobile and desktop navigation are quite different regarding this topic. While mobile apps typically rely technically on \u201caccessibility elements\u201d that can be grouped, desktop apps rely on focusability of specific parts of the interface. From a design perspective, this does not change significantly the way we should think about grouping, but it\u2019s important to keep in mind the implementation can vary drastically, making it important to guide developers and iterate towards the targeted experience.</p> <p>2 - Labelling the elements</p> <p>Labelling the elements of your app is critical to ensure the understanding of the interface and content. The term \u201clabel\u201d can have different implementation meanings depending on the platform or framework used. Here, we will use label to refer to the sentence that is typically read aloud by screen readers, including the type of the content, the value, etc. Frameworks and platforms typically use structured data to then generate what we call here a label.</p> <p>A good label must:</p> <ul> <li>Reflect the context or type of content you are presenting to the user.</li> <li>Tell the actual content (or value) of the element, or its alternative text if it is visual.</li> <li>Let the user know if it is actionable.</li> <li>Contain all the information a user who can see would have at disposal.</li> <li>Be clear and require no more context to be understood.</li> <li>Have the informations ordered with care to put the most important elements first, allowing users to navigate through the app rapidly without waiting for the full label to be read out loud if they don\u2019t need to.</li> </ul> <p>For a messaging app, a label for a discussion can be:</p> <pre><code> \"Michel Berger. 3 unread messages. You said: Thanks ! at 9:07. Message status: sent. Pinned. Actions available.\u201d\n</code></pre> <p>Again, depending on the platform or framework, the ways to achieve this might differ. We will tackle this issue in platform-specific modules.</p> <p>3 - Establishing a focus order</p> <p>When your elements are grouped and labelled, the last step to make your interface accessible to people who use assistive technologies and/or the keyboard to use your app is to decide the focus order.</p> <p>Let\u2019s say we are working on an application implementing a chat. When entering a discussion, which element should be focused first? The last message, the title of the discussion, the text input?</p> <p>There often is no way of predicting which answer is the best. It really comes down to testing what is the most navigable, understandable and interactable.</p> <p>In this case, we would typically focus the last element of the discussion first, because it is typically the one of interest, and because it gives a quick access to the text input. But this is clearly a design choice that must be well-thought and tested in the context of your app.</p>"},{"location":"C-IDE/#the-ui-is-simple-and-intuitive","title":"The UI is simple and intuitive","text":"<p>A simple and intuitive UI benefits everyone. But while this might be a convenience for most users, this is a need for some of them. Wether due to being neurodiverse or to the use of assistive technologies, having an interface that is as simple and less cluttered as possible will instantly make it more accessible and inclusive! Rob Whitaker gives us in the 12th chapter of his book some insights on how to achieve this goal, summed up and a bit modified here:</p> <ul> <li>Keep the interface as less cluttered and as consistent as possible.</li> <li>Moving or animated content should be pausable.</li> <li>Limit the number of text font and sizes used. Avoid pure black-on-white text.</li> <li>Body text should be naturally (not fully) justified.</li> <li>Keep written content clear, concise and free of acronyms or idioms.</li> <li>Provide alternatives to text (with images, graphs, screen reader support, etc.)</li> <li>Limit vivid colors, especially around content.</li> <li>\u201cDon\u2019t insist on accuracy for written input. Instead, provide options.\u201d Depending on the platform, implementing auto-completion, spell-checkers, dictation, etc. can be helpful.</li> <li>Avoid dark patterns, and moreover, be very clear on the consequences of the action taken by the users on your interface.</li> </ul>"},{"location":"C-IDE/#the-ui-has-options-to-prevent-motion-sickness","title":"The UI has options to prevent motion sickness","text":"<p>Some people experience motion sickness when looking at animations. Some platforms allow the developers of third party apps to know whether the user as activated a setting reducing motion. It\u2019s a good idea to include an annotation (we will tackle annotations more globally in TODO) letting the developers know when there is a know trigger to be optionally deactivated. As mentioned in \ud83d\udd2d Inclusiveness needs overview, known triggers include:</p> <ul> <li>Zooms</li> <li>Flashing or blinking</li> <li>Animations playing automatically without user interaction</li> <li>Parallax effects</li> </ul>"},{"location":"C-IDE/#the-ui-adapts-well-to-other-cultures","title":"The UI adapts well to other cultures","text":"<p>A good design should be intuitive to everyone. While it\u2019s difficult to see, our design choices always rely on our cultural background, which is not always shared by all users. There are many subjects to pay attention to while designing in order to make your interface feel as home for as many people possible. While it is impossible to cover everything in this module, here are some of them to start with:</p> <p>Language</p> <p>Supporting as many languages and dialects as possible makes it possible to many more people to use your app with ease. Organizations open-sourcing their code can consider relying on the community to help give feedback on localization of their apps. Make sure to also open support to dialects.</p> <p>Right-to-left support</p> <p>Many languages are written from right to left. While most frameworks and platforms provide automatic RTL support, it is important to check that elements of the interface, particularly the custom ones, are rearranged accordingly. Keep in mind that does not only apply to text alignment, but also to navigation, icons, layout, charts, etc. We will not detail everything here but you can find here the Apple right to left guidelines that are very detailed.</p> <p></p> <p>Colors</p> <p>Depending on the culture, colors can have many different meaning. The most outstanding example is certainly the case of green and red. While in most countries of the western world, green is rather positive and red negative, these colors are generally used to mean the opposite in China.</p>"},{"location":"C-IDE/#users-age-gender-identity-sexuality-ethnicity-financial-situation-etc-are-not-assumed","title":"User\u2019s age, gender identity, sexuality, ethnicity, financial situation, etc. are not assumed","text":"<p>A bias that we can have as humans is to assume others\u2019 characteristics based on what we see around us. And as designers, we want our interfaces to feel welcoming for everyone. This is why paying attention not to assume any human characteristics or stereotype is essential when building an app. Here are some examples:</p> <p>Content representing people and activities</p> <p>In your app\u2019s content and illustrations, be sure to include different ethnicities, body types, gender expressions, etc. when depicting people.</p> <p>Make sure you also include a good variety of relatable activities and cultural references in textual examples, illustrations, etc.</p> <p>Gender identity &amp; expression</p> <ul> <li>If your app asks for a user\u2019s gender, make sure to provide more options that just male and female, and to add support for custom entries.</li> <li>Avoid using the \u201chis\u201d or \u201cher\u201d pronouns when it is not necessary. If your app needs to, be sure to ask users which pronouns they use.</li> <li>When depicting a human, use gender-neutral icons rather than a man or a woman.</li> <li>If your app requires a legal name, make sure to leave the possibility open to use a preferred name. In general and if possible, it is better not to put any constraint on which name is provided and to allow for a flexible structure to accommodate cultures where names might come in a different order.</li> </ul> <p>Access to technology</p> <p>As Whitaker reports, \"[f]or an estimated 20% of Internet users, a smartphone is their only access to the Internet.\" It is thus crucial to ensure equal access to the features on desktop and mobile not to exclude anyone the experience you are building.</p> <p>Digital literacy</p> <p>If you are reading this, chance are there are proportionally very few people with as many digital skills as you. That is why it is crucial to keep in mind that your interface should not only be understandable by you or your team, but also (and most importantly) to those who didn't grow up with technology around them. This mainly comes down to making the app simple, intuitive, not cluttered, flexible, and configurable. Some platforms allow for a simplified version of your app, like Assistive Access on iOS.</p>"},{"location":"C-IDE/#the-ui-takes-care-of-the-user","title":"The UI takes care of the user","text":"<p>The way your app is designed can have a great impact on the user's mental health. The way content is presented, the reasons for which you push notifications, what you nudge them to do, etc. should be intentional and done empathetically. Allowing for self control and to let go of your app are crucial steps toward this goal.</p> <p>Feel free to contribute to this section that could be more detailed!</p>"},{"location":"C-IDE/#getting-creative","title":"Getting creative","text":"<p>Once the core aspects of your app are accessible and inclusive, there are many ways in which you can push the experience further while having fun getting creative and innovative. Thinking about new ways of interacting with your app can be a great challenge to tackle with your team. One good example is the \"magic tap\" on iOS. It allows to execute any action the developer decides when double-tapping with two fingers when VoiceOver is on. It can be used as a shortcut to access a core feature of your app, normally requiring a few more steps to the user. Think about it: what could it do in your app? Another one is the spellchecker which was recently implemented in Jami, allowing people with dyslexia to type more confidently while helping everyone avoiding typos.</p>"},{"location":"C-IDE/#communicating-inclusive-design","title":"Communicating inclusive design","text":"<p>Communicating your IUI - and especially the accessibility parts which can be graphically invisible - to developers is not an easy task. As most developers are used to receiving designs that they implement based on their experience of what using an app is like, you will likely not get a good result if your communication is not clear.</p> <p>The best way to communicate the UX you are aiming for users who use assistive technologies is through design annotations, so that you - as a designer - get to think about the labels, focus order, etc. before the implementation starts. We detail how to do so in the platform-specific modules.</p> <p>Another key to achieving your inclusiveness goals for your UI is to actively test and provide feedback using assistive technologies. Accompanying developers towards a great (inclusive) UX takes time and will likely require many iterations - not to mention that your designs will never be perfectly inclusive either!</p>"},{"location":"C-IDE/#activity-designing-and-iui-on-a-whiteboard","title":"Activity: designing and IUI on a whiteboard","text":"<p>By groups, trainees are invited to design a simple interface (with pen and paper or any design tool they like) that aims at being as inclusive as possible.</p> <p>On possibility is to ask for an account creation screen for a social media app. The platform can differ from one group to the other.</p> <ul> <li>The interface should include:<ul> <li>Fields to fill in social media information (like name, gender, hobbies, etc.)</li> <li>A button to send the form</li> <li>A way of going back to the home page</li> <li>A checkbox to accept the service\u2019s TOS, with a link to access them</li> </ul> </li> </ul> <p>The trainer can encourage the groups to think of the ways they can use creatively what they\u2019ve just learned, without feeling the need to implement everything: inclusion is a journey, not an issue to be tackled in ten minutes anyway!</p>"},{"location":"C-IDE/#wrapping-up","title":"Wrapping up","text":"<p>Here are the key takeaways of this module:</p> <ul> <li>An inclusive app is one using which users can thrive with and feel welcome in.</li> <li>Designers have a big responsibility regarding inclusiveness as they are their team\u2019s compass towards delivering an outstanding experience for everyone.</li> <li>The IUI should not be seen as a standard UI that was made accessible, nor as a separate UI, but as an ideal to strive for, for the entire UI to be inclusive and welcoming for everyone.</li> <li>Making you interface inclusive is an occasion to get creative and to think about new innovative ways of interacting with your app.</li> <li>Building an IUI is a long process, that can start with baby steps today.</li> </ul> <p>Remember: good design is inclusive, and good design benefits everyone!</p>"},{"location":"C-IDE/#resources","title":"Resources","text":"<p>Color Contrast Checker &amp; Accessibility Checker | Figma</p> <p></p> <p>AUI Perspective v2.excalidraw</p>"},{"location":"C-IDE/#sources","title":"Sources","text":"<p>Shew Ashley, Against Technoableism: rethinking who needs improvement. 2023</p> <p>Winner, Langdon (1980). Do artifacts have politics? Daedalus 109 (1): pp. 121--136.</p> <p>Apple Human Interface Guidelines: Accessibility</p> <p>Apple. Principles of Inclusive App Design</p> <p>Whitaker, Rob (2020). Developing Inclusive Mobile Apps: Building Accessible Apps for iOS and Android, Apress Berkley.</p> <p>Cambridge's dictionary's definition of inclusiveness</p>"},{"location":"C-IDM/","title":"\ud83d\udcf1 Inclusive design for mobile","text":"<p>In this module</p> <p>This module allows participants who take design decision on mobile to receive platform-specific advice.</p> <p>\u26f3\ufe0f Section: C. Designing inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: \ud83c\udfa8 Inclusive design 101, \ud83d\udcf2 Assistive technologies: Mobile</p>"},{"location":"C-IDM/#when-to-use","title":"When to use ?","text":"<p>This short module should always be used as a complement to \ud83c\udfa8 Inclusive design 101, as a bonus to go further for mobile platforms. It can also be very useful to mobile developers.</p>"},{"location":"C-IDM/#mobile-devices-and-inclusiveness","title":"Mobile devices and inclusiveness","text":"<p>Mobile devices are protheses</p> <p>We know smartphones are very personal. They follow most people everyday and everywhere, shaping their experience of life as human beings. As your app takes the role of a prothesis (wether social, work-related, movement-related, etc.) to your users (and possibly even more so if they have disabilities), it is so important for it to be equally pleasant and ergonomic to use to everyone, and especially to those who depend on it.</p> <p>Mobile devices are used in a great variety of contexts</p> <p>As our smartphones typically follow us everywhere during our day, we are prone to using it in may different contexts. Environmental constraints such as light (diminishing contrast), movement (provoking motion sickness), availability of limbs (e.g. preventing users to move one of their hands), sound or exigence of silence, etc. make accessibility features crucial for even more people (with or without disabilities).</p> <p>Mobile devices are some people's only access to your platform</p> <p>For many people, smartphones are the only way of accessing your content. Indeed, in 2018, 20% of Internet users only had a smartphone to access the Internet (Rob Whitaker, 2020). It is thus crucial to guarantee a great and full(y accessible) experience of your content in your mobile app.</p>"},{"location":"C-IDM/#specificities-of-mobile-accessibility-and-inclusiveness","title":"Specificities of mobile accessibility and inclusiveness","text":"<p>Here are some specific considerations regarding accessibility and inclusiveness on mobile devices:</p>"},{"location":"C-IDM/#gestures","title":"Gestures","text":"<p>While desktop app typically rely on a keyboard and (most commonly) a mouse, mobile devices provide by default only a touch screen (and a few buttons) to interact with the device. This brings some accessibility issues to people who can't, prefer not to or have difficulties to use their limbs to interact directly with touch screens. For example, people with tremors can have a hard time targeting buttons on the screen or making complex gestures.</p> <p>This is why your app should:</p> <ul> <li>Provide consistently good padding on actionable elements (touch targets' sizes should be of 44px on each direction at minimum) to ensure most people can effectively use the touchscreen.</li> <li>Propose alternative gestures (for example, allowing to close a modal by dragging it or by touching a \"close\" button) so that your users have different ways of executing an action.</li> <li>Integrate with (or even implement) tools allowing for shortcuts, automation and voice assistants.</li> <li>Allow users to use screen readers, switches, keyboards, etc.</li> </ul> <p>For reference, this is a button with a text of size 12. While having an important padding, the button is at the edge of being too small to be considered accessible.</p>"},{"location":"C-IDM/#the-accessibility-model-of-mobile-platforms","title":"The accessibility model of mobile platforms","text":"<p>In this section, we'll go through a model allowing designers to understand how accessibility is implemented by the developers from a high-level perspective, without going in the details or into os-specific considerations. Understanding this is very important for designers, so that they have an idea of what can easily be done to make the platform accessible</p> <p></p> <ul> <li> <p>An accessibility group (or accessible element) is an element which will be accessed atomically (i.e. without dividing it into multiple elements) by cursor interfaces (like VoiceOver/TalkBack or Switch Control/Access). For example, a button and its title should grouped as they share the same semantics.</p> </li> <li> <p>A label qualifies the name of an element. It is read by screen readers and used to access the element with voice. This is why it should always as short as possible yet distinct from other elements of the interface. For complementary information on the element, the value should be used. For example, a button should have its title as label.</p> </li> <li> <p>A value gives information about the element, like its state or any other information that is not in the label. It is typically read after the label by the screen reader. For example, for a toggle, the value would give its state (enabled or disabled).</p> </li> <li> <p>A trait qualifies an element on its type or role. Multiple ones can (and likely should) be applied on one element. There are many depending on the OS. The most important ones are \"Button\", \"Static text\", \"Toggle\", \"Allows direct interaction\" (for elements which allow interaction through touch, bypassing the screen reader, like a digital piano), \"Link\", \"Image\", \"Header\" (allowing screen reader users to skim through the content), etc. They give information both to the user and to the screen reader which will interpret and behave differently. This one is quite technical, so it is okay for a designer not to know them all. But it is always good to check on the implementation if the behavior is the one intended. If not, that might be a trait issue. If you're unsure which trait should be used, don't hesitate to use a sticky note to describe the intended behavior on your design!</p> </li> <li> <p>An action is - you will never guess - an action the user can take on an element. They can either be primary (i.e. actionable directly by double-tapping on a selected element) or secondary/custom (i.e. actionable once selected by swiping vertically to cycle through them), in which case they also have a textual label used to identify it.</p> </li> <li> <p>A hint gives additional textual information or context to the user that will be read last. Hints should help users who have lost the context of where they are, or who don't understand how to interact with an element.</p> </li> <li> <p>The focus order allows to specify in which order the elements of your UI should be accessed. In most cases, the best one won't be the left-to-right or right-to-left reading order. This is why you should always indicate in your design the order in which the elements should be accessed.</p> </li> </ul> <p>All of this represent design decisions that can be challenging to communicate to the dev team through a Figma/XD file. In the next section, we'll discuss ways you can make sure your design prescribes accessibility from the very start.</p>"},{"location":"C-IDM/#incorporating-accessibility-to-your-design-files","title":"Incorporating accessibility to your design files","text":"<p>One of the easiest and most efficient ways of communicating these design decisions is through accessibility annotations on your design file. We won't recommend any preset specifically here, but you can find online many free accessibility annotation kits made by the Figma community. Those presets typically allow you to indicate all the information detailed in the previous section to the developers right in the design they are working from.</p> <p>By incorporating these in your design, you are saving your developers a lot of design work they would have done anyway, without all your expertise and knowledge about the targeted UX for the users who use assistive technologies.</p>"},{"location":"C-IDM/#sources","title":"Sources","text":"<p>Whitaker, Rob (2020). Developing Inclusive Mobile Apps: Building Accessible Apps for iOS and Android, Apress Berkley.</p>"},{"location":"D-AND/","title":"\ud83e\udd16 Inclusive features and programming for Android","text":"<p>In this module</p> <p>This module introduces trainees to Android's accessibility features, and to the practice of inclusive programming for Android.</p> <p>\u26f3\ufe0f Section: D. Programming inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Android developers and product teams</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101</p>"},{"location":"D-AND/#when-to-use","title":"When to use","text":"<p>This module should be used with trainees who program Android apps, product designers and managers who would like to better understand what is possible on Android when it comes to accessibility.</p> <p>Info</p> <p>As we are not Android developers and didn't get the chance to dive deep into Android accessibility as of the time of writing, this module's content could be significantly improved. For now, this page will mainly redirect to useful resources we found along with some key takeaways. If you have experience with Android accessibility and you feel like helping the project, please contribute.</p>"},{"location":"D-AND/#androids-accessibility-model","title":"Android's accessibility model","text":"<p>Accessibility is presented by Google as one of Material 3's foundations. Indeed, like iOS, Material native components come with built-in accessibility that represent most of the hard work. Consequently, if you use native components, most of your work as a developer is to contextualize those elements by customizing the labels, actions and by building a consistent navigation through the accessibility tree.</p> <p>Android's accessibility tree is a hierarchical organization of your app's on-screen components that is made available to assistive technologies. It is automatically derived from your code (whether XML or Compose). Design decisions like custom labels, grouping or changing the focus order can be implemented by applying changes to the nodes, using Android's accessibility API.</p> <p>This API is not very well documented by Android themselves, but there are great resources out there to learn how to implement accessibility for this platform:</p> <ul> <li>APPT's technical documentation is very extensive and can provide you with code samples and explanations through the whole Android accessibility API. They provide the same for Jetpack Compose.</li> <li>Rob Whitaker's Developing Inclusive Mobile Apps: Building Accessible Apps for iOS and Android is a very pedagogical book that has a chapter dedicated to implementation of Android accessibility. While it does not cover Jetpack Compose (the book was published in January of 2020), the author gives insightful guidelines that can be applied anyway.</li> </ul>"},{"location":"D-AND/#androids-assistive-technologies-and-features","title":"Android's assistive technologies and features","text":""},{"location":"D-AND/#talkback","title":"TalkBack","text":"<p>TalkBack is the most prominent assistive technology available on Android. It works very much like VoiceOver, letting users navigate through your app (via the accessibility tree) without needing to see the screen. By making your app work with TalkBack, you are doing most of (if not all) the job required for it to be usable with any assistive technology.</p> <p>Testing how you app works with TalkBack is the first thing to do to get a idea of what are the main issues. The best way of doing so is by dimming or hiding your screen (Android has a feature called \"Dark screen\" that allows to do so) to actually get an idea of how a blind or low-vision user would perceive your app. Look for missing labels, missing features (like unreachable elements or unavailable actions), grouping issues, etc. For more details on how to build an interface that is usable with assistive technologies, refer to \ud83c\udfa8 Inclusive design 101.</p> <p>Tip</p> <p>Here is APPT's full list of TalkBack gestures. They also have an app made to teach you how to use it.</p>"},{"location":"D-AND/#switch-access","title":"Switch Access","text":"<p>Switch Access is Android's accessibility feature allowing to control the device using a switch, that can either be external, a keyboard, or even the phone's buttons. If your accessibility tree is already well organized, navigating through your app with a switch should be fine. That said, make sure to check that actions requiring complex gestures, like drag-and-dropping, are supported by adding accessibility actions. Also, if you've implemented a tap listener on an element that is not marked as actionable, Switch Access won't pick it up.</p>"},{"location":"D-AND/#keyboard-access","title":"Keyboard Access","text":"<p>Android allows users to control their device using a keyboard. While, again, TalkBack support should mean that the app can be used with a keyboard, this does not guarantee a good user experience. Providing keyboard shortcuts (Jetpack Compose, XML) and custom keyboard order (Jetpack Compose, XML) will contribute to delivering a great UX to keyboard users.</p> <p>Tip</p> <p>Here is APPT's guide to navigating apps with an external keyboard.</p>"},{"location":"D-AND/#voice-access","title":"Voice Access","text":"<p>Voice Access is an accessibility service developed by Google and available in the Play Store. It aims at providing vocal access to the whole device. Unlike Apple's Voice Control, this software uses numbers rather than labels to interact with elements. Users can also use text values (and not content description) to select an item of the UI.</p>"},{"location":"D-AND/#third-party-assistive-technologies","title":"Third-party assistive technologies","text":"<p>Unlike Apple, Android has opened their accessibility API, allowing anyone to build their own accessibility service. While you probably don't want to implement one specifically for your app (unless you really have specific accessibility needs), it's good to know that there are plenty of tools to choose from!</p>"},{"location":"D-AND/#display-size-text-size","title":"Display size, text size","text":"<p>Display and text sizes might vary dramatically based on user needs. Making your app adaptable to those variables is quite straightforward:</p> <ul> <li>Make sure your text font sizes are indeed affected by system settings. If not, consider using sp as unit for your sizes where you are required to use fixed values.</li> <li>Avoid using <code>maxLines</code> to prevent text truncation.</li> </ul>"},{"location":"D-AND/#captions","title":"Captions","text":"<p>Captions can easily be implemented in your Android app for media content. Refer to the APPT documentation for details (Jetpack Compose: standard, live; XML: standard, live).</p>"},{"location":"D-AND/#reduced-animations","title":"Reduced animations","text":"<p>Some users prefer or need to reduce animations. While Android doesn't directly indicate through the API whether the user has the option activated or not, you can determine it with this little workaround. Stopping automatic and repeating animations, as well as flashes or blinkings, zooms and parallax effects is crucial to make sure users can use your app safely and comfortably.</p>"},{"location":"D-AND/#resources","title":"Resources","text":"<p>APPT's technical documentation for Android XML APPT's technical documentation for Jetpack Compose Rob Whitaker's Developing Inclusive Mobile Apps: Building Accessible Apps for iOS and Android</p>"},{"location":"D-APL/","title":"\ud83c\udf4e Inclusive features and programming for Apple platforms","text":"<p>In this module</p> <p>This module introduces to Apple's accessibility features, and to the practice of programming accessibility for Apple platforms.</p> <p>\u26f3\ufe0f Section: D. Programming inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Apple developers and product teams</p> <p>\u23f1\ufe0f \ufe0fDuration: 25'</p> <p>\ud83d\udcda Prerequisites: \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101</p>"},{"location":"D-APL/#when-to-use","title":"When to use","text":"<p>This module should be used with trainees who need or want to have a technical understanding how Apple's approach on accessibility. It can be useful for product managers or designers who want to understand Apple accessibility features, and what it takes to implement them (especially for the last sections).</p>"},{"location":"D-APL/#introduction","title":"Introduction","text":"<p>For years, Apple has been setting the standard for mobile accessibility. Their design principles, guidelines, as well as the tools and technologies they built are among the best out there. They also provide extensive resources on how to use and apply them. Thanks to these, if you're developing natively for Apple platforms, implementing accessible interfaces will likely be easier than for other OSes.</p> <p>Consequently, we won't be covering everything you should know about Apple accessibility in this module. Rather, we'll provide a very synthetic overview referencing useful official and third-party resources, along with some extra tips we wish we had when we started out.</p>"},{"location":"D-APL/#apples-accessibility-model","title":"Apple's accessibility model","text":"<p>The model used by Apple to implement assistive technologies support to apps is based on accessibility attributes. It is quite close to Android and to the abstract model we detailed in \ud83d\udcf1\u00a0Inclusive design for mobile, but we'll detail specific technical consideration and vocabulary here:</p> <p></p> <ul> <li> <p>An accessibility element is an element of the interface which will be accessed atomically (i.e. without dividing it into multiple elements) by cursor interfaces (like VoiceOver or Switch Control). Every element has accessibility attributes. Every UI Component provided by Apple is an accessibility element. You then have the choice to regroup them, either by completely resetting the element's attribute, or by automatically computing the children's one. In complex cases, we would recommend manually resetting computing those properties to get clean labels, actions etc.</p> </li> <li> <p>A label qualifies the name of an element. It is read by screen readers, and used in order to access the element with Voice Control. This is why it should always be as short as possible yet distinct from other elements of the interface. For complementary information on the element, the value should be used. For example, a button should have its title as label.</p> </li> <li> <p>A value gives information about the element, like its state or any other information that is not in the label. It is typically read after the label by the screen reader. For example, for a toggle, the value would give its state (enabled or disabled).</p> </li> <li> <p>A trait qualifies an element on its type or role: it is mainly useful to the system, to know which information to read first, which levers or indications to expose to the user, etc. Multiple ones can (and likely should) be applied on one element. Depending on the components you are working with, some traits are applied automatically, and some others require to explicitly apply a modifier. There are many accessibility traits (SwiftUI, UIKit), when beginning your accessibility journey, we recommend checking this list regularly when you add traits to your elements as it is a good way to try and understand them in context. For example, here are a few:</p> <ul> <li>Button: the name speaks for itself!</li> <li>Header: this one is absolutely crucial as it allows users to quickly skip through the headings of the view.</li> <li>Allows direct interaction: allows users to interact with the element through touch, bypassing VoiceOver. A typical usage example is for a piano app.</li> </ul> </li> <li> <p>An action is a function <code>() -&gt; Void</code> that will be triggered by a double-tap in VoiceOver, or a tap with Switch Control. There is a default one, which is not named but called on the UI \"Activate\", and an arbitrary number of custom ones which are named and can be selected using swipes in VoiceOver, and a dedicated contextual menu in Switch Control. It is very useful and often crucial to provide many actions on an element. For example, for a discussion in a list, the default action would be to open it, and a custom one could be to mute it.</p> </li> <li> <p>A hint gives additional textual information or context to the user that will be read last. Hints should help users who have lost the context of where they are, or who don't understand how to interact with an element.</p> </li> <li> <p>A sort priority allows to implement a custom focus order. Elements can also be programmatically focused, which is very useful as you often don't want to start by the first element in the focus order.</p> </li> <li> <p>Custom content gives the opportunity to convey information that you could not give through the other attributes.</p> </li> <li> <p>Custom gestures can also be implemented for advanced custom components that require touch customization.</p> </li> </ul>"},{"location":"D-APL/#apples-assistive-technologies","title":"Apple's Assistive Technologies","text":"<p>Having an understanding of the assistive technologies for which you are building your app is necessary to delivering a great experience. Apple has a lot of them, which they list on this page. Here is our non-exhaustive condensed introduction to Apple-specific Assistive technologies, along with some additional information and tips. Clicking on highlighted keywords will take you to documentation and useful resources.</p>"},{"location":"D-APL/#major-features","title":"Major features","text":"<ul> <li> <p>VoiceOver is Apple's screen reader. It allows users to access your app without seeing the screen. Like TalkBack, Android's screen reader, it is gesture-based, meaning that users can execute simple to complex gestures in order to control their device. Supporting custom rotors actions is a great way to provide quick app-specific actions that go beyond the bare necessity. Learning how to use VoiceOver is probably the best way to understand the levers you can activate to enhance the accessibility of your app, as it is very intuitive, commonly used, and relies both on labels and group focus.</p> </li> <li> <p>Voice Control is a feature allowing users to interact with their devices using their voice. One takeaway of trying Voice Control is understanding how labels differ from values. In fact, labels are used by Voice Control users to select elements on the screen. We can therefore understand that labels should be short, unique identifiers reflecting what is shown on the screen. Values, on the other side, are only read by screen readers and can (and should) be more extensive.</p> </li> <li> <p>Switch Control let users navigate your app with the switch devices of their choice, and/or mouth gestures. Having a clear and efficient navigation and grouping is crucial to making it accessible to users who rely on switch control. While Switch Control support typically comes for free when VoiceOver is, it's a great idea to think about the ways you can enhance its users' experience by implementing simple custom behaviors allowing for smarter and faster interaction.</p> </li> <li> <p>Assistive access's goal is to provide a minimal experience for people with certain cognitive disabilities or who are less familiar with new technologies. With little effort, developers can allow everyone to use the basic features of their app. Guided access allows these users to get a guided experience with custom restrictions, allowing to disable keyboard inputs, volume buttons, etc. With the provided API, you can provide restrictions that are specific to your app. For example, you can disable the access to the settings. This feature can also be used to function like Android's lock task mode (often called \"kiosk mode\") in business context.</p> </li> </ul>"},{"location":"D-APL/#minor-features","title":"Minor features","text":"<ul> <li> <p>For vision-impaired users:</p> <ul> <li>Apple provides a Text to Speech API. While it is not always required for developers to use it as VoiceOver natively does the job, using it allows to programmatically announce events that are currently only conveyed visually, like a new message.</li> <li>Dynamic Type is Apple's fancy name for their advanced system font settings, which allows developers to adapt their app's layout to varying font sizes.</li> <li>Display customization settings like high contrast or reduced motion can be detected to adapt your app's behavior.</li> <li>Magic tap is a very useful feature that is rarely implemented in third-party apps. It allows to perform an arbitrary action upon a \"magic tap\" - a 2 fingers double tap with VoiceOver activated. If designed and hinted well, it can allow for quicker and easier interactions.</li> <li>For apps serving audio and video content, builtin AVFoundation APIs allows you to add alternative audio tracks</li> </ul> </li> <li> <p>For users with limited physical or motors abilities:</p> <ul> <li>Keyboard support in iOS and iPadOS give developers the opportunity to provide users with shortcuts to navigate their app faster and easier.</li> <li>Eye Tracking allows users to control their iPhone through gaze. There is - to our knowledge - typically no additional considerations for this technology.</li> <li>Quick actions can be implemented to allow users wearing an Apple Watch to trigger custom behaviors by pinching twice.</li> </ul> </li> <li> <p>For users who are deaf of hard of hearing:</p> <ul> <li>For apps serving audio and video content, builtin AVFoundation APIs allows you to add subtitles.</li> <li>Information conveyed through audio can also be played through haptics which can even be customized to fit your needs. If your app plays music, Music Haptics allows users to enjoy music through haptic feedback.</li> </ul> </li> </ul>"},{"location":"D-APL/#accessibility-in-swiftui","title":"Accessibility in SwiftUI","text":""},{"location":"D-APL/#the-viewmodifier-approach","title":"The ViewModifier approach","text":"<p>Accessibility in SwiftUI relies heavily on the use of accessibility modifiers, which the list can be very inspiring to come up with accessibility features. These are essentially view modifiers applying accessibility attributes or transformations. There are plenty of them, and we will not detail them here. Rather, we'll briefly discuss this approach and the issues you might run into using those.</p>"},{"location":"D-APL/#grouping-elements","title":"Grouping elements","text":"<p>Something you will likely find yourself doing very regularly is grouping elements. As it is rather complicated to get started with, we will explain the basics. As said earlier, there are different ways of doing so, each corresponding to a case of the <code>AccessibilityChildBehavior</code> enum:</p> <pre><code>var body: some View {\n    Group {\n        NiceView()\n        VeryNiceView()\n    }\n    .accessibilityElement(children: &lt;#T##AccessibilityChildBehavior#&gt;)\n}\n</code></pre>"},{"location":"D-APL/#combine","title":".combine","text":"<p><code>.combine</code> will create a new parent accessibility element, drop its children elements from the accessibility tree (<code>NiceView</code> and <code>VeryNiceView</code> in our example), and compute new accessibility attributes based on the remove children's ones. As indicated in the documentation:</p> <p>SwiftUI API Documentation</p> <p>Some properties may be transformed or ignored to achieve the ideal combined result.</p> <p>This is why we recommend avoiding this modifier in most cases. While being very convenient, its opaque heuristic makes your code unpredictable by the reader and will likely result in an \"automatic\" interface that will necessarily lead to a poor UX.</p>"},{"location":"D-APL/#ignore","title":".ignore","text":"<p><code>.ignore</code> will also create a new accessibility element, also drop its children, but won't get any accessibility attribute for free - you have explicitly write them again.</p> <p>This is the way we would recommend to do it, as it allows to implement thoughtful accessibility attributes.</p>"},{"location":"D-APL/#contain","title":".contain","text":"<p><code>.contain</code> does not compete with <code>.combine</code> and <code>.ignore</code> because it does not serve the same purpose. While it will create a new accessibility element in the tree, their children won't be dropped. As a result, this modifier is only useful to structure navigation and order elements, making sure all the children of the newly created elements are navigated before going to the next accessibility element.</p> <p>To get more insights on whether to group elements or not, refer to \ud83c\udfa8 Inclusive design 101.</p>"},{"location":"D-APL/#limits-to-this-approach","title":"Limits to this approach","text":"<p>If you follow the guidelines we provided above, your code might look like this:</p> <pre><code>var body: some View {\n    Group {\n        NiceView()\n        VeryNiceView()\n    }\n    .accessibilityElement(children: .ignore)\n    .accessibilityLabel(Text(\"VERY_NICE_LABEL\"))\n    .accessibilityHint(Text(\"VERY_NICE_HINT\"))\n    .accessibilityAddTraits(.isButton)\n    .accessibilityAction(named: Text(\"VERY_NICE_ACTION\")) {\n        print(\"Action performed!\")\n    }\n\n    SomeOtherView()\n        .accessibilityLabel(Text(\"A11Y\"))\n        .accessibilityHint(Text(\"SOME_OTHER_HINT\"))\n        .accessibilitySortPriority(1)\n}\n</code></pre> <p>There are several issues we can find in this implementation:</p> <ul> <li>The accessibility-related code is hard to find. In bigger and more complex views, it gets scattered all over the view's code.</li> <li>If same snippets are likely to be repeated everywhere.</li> <li>Yet, consistency across the codebase is not enforced, nor nudged.</li> </ul>"},{"location":"D-APL/#building-a-custom-accessibility-architecture","title":"Building a custom accessibility architecture","text":"<p>To address those issues in the Olvid iOS app, the team worked on helpers that facilitate the work of making components and end-user views accessible.</p> <p>Info</p> <p>In this section, we will be using for example purposes some code extracts from the Olvid iOS client, which is licensed under the GNU Affero General Public License v3.</p> <p>The goals were to facilitate, structure and harmonize the way accessibility is implemented across the codebase. Based on our needs, here is what we ended up with:</p> <ul> <li>A protocol requiring to provide accessibility attributes.</li> <li>A struct giving those accessibility attributes.</li> <li>A view modifier that can be applied on any view conforming to the protocol, applying those accessibility attributes.</li> </ul> <p>As a result, the code can look like:</p> <pre><code>private struct HorizontalListOfUsersViewCell: View {\n\n    // [...]\n\n    var body: some View {\n            InternalView(user: user,\n                         identifiersOfSelectedUsers: $identifiersOfSelectedUsers,\n                         profilePicture: profilePicture?.image,\n                         avatarSize: avatarSize)\n            .obvAccessibleComponent() // The custom ViewModifier can be applied because the internal view conforms...\n\n            // [...]\n\n        }\n\n    private struct InternalView: ObvAccessibilityProvidableView /* ...to this protocol... */ {\n\n        // [...]\n\n        var accessibilityAttributes: ObvAccessibility.ObvAccessibilityAttributes { // ...which requires to provide this struct.\n            .init(\n                label: user?.identityDetails.coreDetails.getDisplayNameWithStyle(.firstNameThenLastName) ?? \" \",\n                value: String(localizedInThisBundle: \"SELECTED\"),\n                actions: [.default: buttonAction],\n                hint: String(localizedInThisBundle: \"DOUBLE_TAP_TO_REMOVE\"),\n                traits: [.isButton])\n        }\n\n        var body: some View {\n\n            // [...]\n\n        }\n\n    }\n\n}\n</code></pre> <p>Now, the accessibility information is easier to find, and the attributes can be applied by a single ViewModifier that encapsulates the grouping guidelines we provided earlier.</p> <p>Please note this architecture is not to be seen as the perfect way to go. We simply hope it will inspire you to build your own!</p>"},{"location":"D-APL/#accessibility-in-uikit","title":"Accessibility in UIKit","text":"<p>We won't be covering accessibility in for UIKit in this module as we have very little experience dealing with it. From what we can tell, it is way less operational than SwiftUI at scale but can still help you make dramatic improvements on your app's accessibility. You can checkout this great resource for UIKit accessibility code. Here is also Apple's documentation.</p> <p>If you have the knowledge</p> <p>We would be happy to integrate some of your knowledge on UIKit Accessibility to our project. Feel free to contribute!</p>"},{"location":"D-APL/#accessibility-inspector","title":"Accessibility Inspector","text":"<p>This is a tool that allows you to inspect any accessibility element on your device, whether physical or emulated. It is very useful when developing to get a textual representation of your components' accessibility attributes. It can also perform accessibility audits that are fast but not very insightful.</p> <p></p> <p>Here is a detailed video presenting the tool.</p>"},{"location":"D-APL/#informing-users-on-your-apps-accessibility","title":"Informing users on your app's accessibility","text":"<p>Once you've done all of this work, you probably want users who value accessibility to know that your app is worth downloading and testing. Apple recently added what they call the Accessibility Nutrition Labels which are essentially a way of telling users which accessibility features you implemented in your app.</p> <p>It's also a good idea to indicate to which technologies or disabilities your app is not accessible. If your app is not ready for being accessible to VoiceOver users, being transparent about it will avoid users who rely on it to try your app and get frustrated.</p>"},{"location":"D-APL/#wrapping-up","title":"Wrapping up","text":"<ul> <li>Apple provides powerful tools for you to achieve great accessibility in your apps.</li> <li>Apple's accessibility model is based on elements and attributes. Providing as many as relevant will help assistive technologies work well with your solution.</li> <li>Knowing about the features used by your users is crucial as it is the first step towards understanding their needs. Some features listed in the module can also be a source of inspiration for you to provide innovative and intuitive way of interacting with your app.</li> <li>SwiftUI accessibility leverages the flexibility of view modifiers, which is sometimes paid at the price of code readability and structure. Once you've identified patterns in the way you and your team use Apple accessibility's framework, you can build helper functions that will facilitate, harmonize and structure accessibility across your codebase.</li> <li>Accessibility Nutrition Labels allow developers to let the users know which accessibility features they can expect when downloading your app.</li> </ul>"},{"location":"D-APL/#resources","title":"Resources","text":"<p>Accessibility | Apple Developer Documentation</p> <p>iOS accessibility | Appt</p> <p>olvid-io/olvid-ios: Olvid client application for iOS</p>"},{"location":"D-APQ/","title":"\ud83d\udcd7 Accessible programming with Qt","text":"<p>In this module</p> <p>This module provides information needed for building accessible code using the Qt framework.</p> <p>\u26f3\ufe0f Section: D. Programming inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Qt Developers and product teams</p> <p>\u23f1\ufe0f \ufe0fDuration: 10'</p> <p>\ud83d\udcda Prerequisites: \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101</p>"},{"location":"D-APQ/#when-to-use","title":"When to use?","text":"<p>Go through this module if your app uses Qt, or if you consider using it for your app. Please note that this module requires the trainees to follow \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101 first.</p>"},{"location":"D-APQ/#introduction","title":"Introduction","text":"<p>There are only few example of good accessibility implementation using Qt. Even the one provided by Qt themselves are limited to a single static page with a few elements. Therefore, we will go through all of Qt's main accessibility elements while taking a look at a complex UI element, a chat view.</p> <p>Info</p> <p>In this module, we will be using for example purposes some code extracts from the Jami Qt client, which is licensed under the GPLv3 license.</p>"},{"location":"D-APQ/#accessibility-labels","title":"Accessibility labels","text":"<p>Screen-readers and other accessibility technologies need specific information in order to navigate through your app. We are lucky that Qt provides a way of setting it automatically using the QAccessible Class. This class is inherited by all of Qt's items.</p> <p>It will try to automatically fill the accessibility fields but this often fails. Therefore you should set those fields manually in order to make your interface accessible. The bare minimum is setting:</p> <ul> <li>The role: this will indicate to the accessibility technology users (like a screen-reader or a braille display) how they can interact with this specific object. It can take values such as Button, StaticText, Heading, dialog... You can find the full list in the according Qt's documentation of QAccessible::Role.</li> <li>The name: this is the main title of your component, like for example \"Create account Button\" or \"Language selection ComboBox\".</li> <li>The description: this should explain to the user what will happen if they interact with this component as well as any additional context information. It can be for example \"Display your QR code to allow other users to scan it and add you as a contact\" or \"Use arrows to switch between available accounts\".</li> </ul> <p>In QML code this would look like:</p> <pre><code>Accessible.role: Accessible.Button\nAccessible.name: toolTipText\nAccessible.description: JamiStrings.qrCodeExplanation\n</code></pre> <p>For many elements, like a message for example, you would want the accessibility to be grouped in ways that are not as obvious as the example above. Let's say that we want to design it for our chat-view. We only want the message to be focusable and it should contain all the information needed. In the \ud83c\udfa8 Inclusive design 101 module, we stated that the label should read something like:</p> <pre><code>\"Michel Berger. 3 unread messages. You said: Thanks! at 9:07.\nMessage status: sent. Pinned. Actions available.\u201d\n</code></pre> <p>The code producing an implementation close to this one would be: <pre><code>    Accessible.role: Accessible.StaticText\n    Accessible.name: {\n        let name = isOutgoing ? JamiStrings.inReplyToYou: UtilsAdapter.getBestNameForUri(CurrentAccount.id, Author)\n        return name + \": \" + Body + \" \" + formattedTime + \" \" + formattedDay\n    }\n    Accessible.description: {\n        let status = \"\"\n        if (bubble.isEdited) status += JamiStrings.edited + \" \"\n        if (IsLastSent) status += JamiStrings.sent + \" \"\n        return status + (readers.length &gt; 0 ? JamiStrings.readBy + \" \" + readers.join(\", \"): \"\")\n    }\n</code></pre></p>"},{"location":"D-APQ/#keyboard-navigation","title":"Keyboard navigation","text":"<p>As stated in \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101, keyboard and focus navigation is mostly automatically set by Qt, but the framework often fails to navigate complex elements. You need to make sure that all focusable elements are reached. Before manually setting keyboard navigation, you should try and use the base focus property of Qt. For example, setting the focus of a component to true might be enough for Qt to recognize it as a reachable interactive element. These will largely depend of the component you will be working on but you will get used to seeing some of the following variables.</p> <p><pre><code>    keyNavigationEnabled: true\n    keyNavigationWraps: false\n    focus: true\n    activeFocusOnTab: true\n</code></pre> That said, you will often need to set manually the keyboard navigation using Qt's KeyNavigation class.</p> <p>A very easy example would be: <pre><code>KeyNavigation.backtab: addAccountItem\nKeyNavigation.tab: shareButton\nKeyNavigation.up: addAccountItem\nKeyNavigation.down: shareButton\n</code></pre></p> <p>In some case like a contextual menu, you might want to add conditional navigation: <pre><code>KeyNavigation.backtab: index === 0 ? settingsButton: null\nKeyNavigation.tab: index === listView.count - 1 ? addAccountItem: null\nKeyNavigation.up: KeyNavigation.backtab\nKeyNavigation.down: KeyNavigation.tab\n</code></pre></p> <p>Regarding our chat view, we previously stated in \ud83c\udfa8 Inclusive design 101 that \"we would typically focus the last element of the discussion first, because it is typically the one of interest, and because it gives a quick access to the text input. But this is clearly a design choice that must be well-thought and tested in the context of your app.\" This is only one of the many possible implementations. We could also want to send users directly to the text stating the current discussion's name.</p> <p>Inside the list of messages, we could want users to navigate between elements using the arrows and TAB to directly go to the text input field - but once again, this is a design choice. <pre><code>// Rather than doing this inside the message itself, we do it at the ListView level\nListView {\n    id: root\n    // We try to minimize custom code for navigation and therefore use\n    // the Qt base property of a List view rather than setting\n    // KeyNavigation.tab each time\n    keyNavigationEnabled: true\n    keyNavigationWraps: false\n}\n</code></pre></p>"},{"location":"D-APQ/#the-accessibleinterface-class","title":"The AccessibleInterface Class","text":"<p>The QAccessibleInterface Class is useful to create inclusive user interfaces. It implements a pure virtual API that allows assistive technologies like braille displays or screen readers to directly access information about accessible objects. We have less experience with it as we haven't implemented it on applications we are working on yet.</p>"},{"location":"D-APQ/#sources","title":"Sources","text":"<p>Qt's documentation of QAccessible Class</p> <p>Qt's documentation of QAccessible::Role</p> <p>Qt's documentation of KeyNavigation class</p> <p>Qt's documentation of QAccessibleInterface Class</p>"},{"location":"D-ICO/","title":"\ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101","text":"<p>In this module</p> <p>This module provides general information needed for building accessible code on any platform or language.</p> <p>\u26f3\ufe0f Section: D. Programming inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Developers</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: \ud83e\udec2 We are all disabled and unique : accessibility, plurality and intersectionality</p>"},{"location":"D-ICO/#when-to-use","title":"When to use?","text":"<p>This module should be used with trainees before diving into the accessibility specificities of their platform, language or framework. It aims at settling good practices and avoiding common accessibility pitfalls.</p>"},{"location":"D-ICO/#development-mindset-accessible-code-is-good-code","title":"Development mindset : Accessible code is good code","text":"<p>As we will see in this section, bad accessibility can often be a symptom of flawed code. That\u2019s good news! It means that fixing it often only requires good code practices.</p>"},{"location":"D-ICO/#custom-components-and-accessibility","title":"Custom components and accessibility","text":"<p>Many applicative frameworks come packed with standards components (like labels, buttons, timers, etc.). To put it simply, the main takeaway of this section would be:</p> <p>\u26d4 Don't reinvent (or program in our case) the wheel! (please)</p> <p>You code can be good but will likely never be as robust as one iterated upon by a community of developers or a big company. Therefore, before implementing anything, check rigorously that your framework (or a library) doesn\u2019t provide a tool that would meet most of your needs.</p> <p>Frameworks often have unified and often automated ways of handling accessibility with key navigation, focus and label generation. Therefore, building complex custom components will very frequently (not to say almost always) break accessibility handling if no more work is done. Therefore, try to limit the complexity of your UI objects, document them properly and when trying to fix an accessibility issue, consider taking the hard way by refactoring the component. Your whole code will actually be better.</p> <p>For a more concrete example, on the left you can see a custom combo-box component, deeply broken from an accessibility standpoint. On the right, you can see a native Qt combo-box, more feature-full -aesthetics aside- and working fine with a screen reader and Keyboard navigation without necessitating any intervention.</p> <p>We believe that there are very few reasons not to use the second one.</p> <p>If however you decide to make a custom component, make sure you implement extensively the accessibility APIs provided by your framework. This generally requires a deeper understanding of how accessibility is handled by your platform, but can be done well though it will likely require some maintenance over time.</p>"},{"location":"D-ICO/#what-bad-accessibility-says-about-our-code-a-few-concrete-examples","title":"What bad accessibility says about our code: a few concrete examples","text":"<p>Accessibility and inclusiveness in programming have one key benefit: making you think twice about your code. As said previously, stumbling into an accessibility issue might mean that you could be doing something better in a different way.</p> <p>Let\u2019s investigate that by taking a look at the most obviously broken component in Jami: the username info box tooltip (the small 'i' on the right).</p> <p></p> <p>It\u2019s an \u201cinfo box\u201d (as called in the code), but a screen reader will handle it as a push button. That seems weird, as this is used as a tooltip, not a button allowing an action. Additionally, it doesn\u2019t react well when selecting and unselecting the username text edit.</p> <p>That is because in the code, this component is indeed a button. That goes without saying that it\u2019s not a good way of implementing it, and as a result, the corresponding code is very extensive (more than 80 lines of code)! This is the cause of both accessibility and the selection issues. While it technically works, there are plenty of ways to use default components for a better result. In this case, broken accessibility indicate bad implementation choices.</p> <pre><code>icon: PushButton {\n\n    id: infoBox\n    z: 1\n    normalColor: \"transparent\"\n\n    // ...\n    checkable: true\n    onCheckedChanged: {\n        textBoxinfo.visible = !textBoxinfo.visible;\n    }\n    preferredSize: 20\n    // ...\n\n}\n</code></pre> <p>Another example would be the account selection list in Jami. It was not possible to navigate between the different items using the keyboard arrows making it non-usable from an accessibility standpoint.</p> <p> </p> <p>That\u2019s an unexpected behavior as the best ListView Qt component (which our custom component is based on) supports this navigation method. A quick inspection of the code revealed those lines:</p> <pre><code>Keys.onUpPressed: verticalScrollBar.decrease()\nKeys.onDownPressed: verticalScrollBar.increase()\n</code></pre> <p>By reimplementing a scroll feature and binding it to the arrows key, we effectively broke the base behavior of the component. Here, broken accessibility showcase flawed design as the expected behavior of the component hasn\u2019t been thought all the way through.</p> <p>In this case, the fix was rather simple: use the base component rather the custom one.</p> <p>And when you don't have the choice to work with custom components, remember to pay close attention to your framework's accessibility APIs and guidelines to make sure your components can blend in.</p>"},{"location":"D-ICO/#focus-and-explicit-key-navigation-choose-the-right-tool-at-the-right-time-desktop","title":"Focus and explicit key navigation, choose the right tool at the right time (Desktop)","text":"<p>In order to implement alternative navigation in your app (keyboard, VoiceOver, talkback, vocal command, etc), on desktop, they are two main way of doing it: focus and explicit key navigation. By default, your framework will try to predict the order in which you would want to move between objects by making all focusable elements accessible through alternative navigation. This will work mostly well on basic components.</p> <p>It happens very often that this flow of navigation breaks for numerous reasons, a pop-up could have appeared, new UI elements might be visible or maybe the elements are complex (sub-tabs in settings for example)</p> <p>As stated previously, all interactive components must be accessible:</p> <p>If one is simply not reachable, your first strategy should be to try and make it focusable so that your framework can automatically incorporate it in its navigation.</p> <p>Often, that might not be enough. The element could be reachable but not in any practical way. For example in a chat view, keyboard navigation could automatically send you to the first message loaded, forcing the user to pass through the whole conversation before accessing the message bar.</p> <p>In those situations, you could want to use explicit keyboard navigation, to force a component to send you to another component that you has chosen. This is the most flexible but more time expensive approach. An example in pseudo code would be:</p> <pre><code>KeyNavigation.tab: isTheExtendedViewLoaded()? settingsButton : moreInfosButton\nKeyNavigation.backtab: newAccountButton\nKeyNavigation.up: isTheExtendedViewLoaded()? fromBackupButton : alreadyHaveAccountButton\nKeyNavigation.down: KeyNavigation.tab\n</code></pre>"},{"location":"D-ICO/#fading-components","title":"Fading components","text":"<p>Some interface components have fade behaviors. For example, call action bars typically contextually fade in and out.</p> <p></p> <p>In those situations you would want to implement a custom logic specific to those fading components:</p> <ol> <li>Any navigation key press should make the fading component visible again</li> <li>The component shouldn't fade if it is focused, or if one of its children items is.(for example a button inside the call action bar)</li> <li>The selected element should be clearly identifiable by the user</li> </ol> <p>In the screenshot below, you can see the example of the call action bar of Jami which clearly communicates the selection of one of its elements.</p> <p></p>"},{"location":"D-ICO/#development-process","title":"Development process","text":""},{"location":"D-ICO/#what-can-be-automated","title":"What can be automated?","text":"<p>What can be automated is a tricky question. As we stated previously, inclusiveness is a process and the need for an intersectional perspective make it impossible to think ahead every need that diverse user with complex background and set of ability might have.</p> <p>Therefore, no amount of checklists and tests in CI can replace feedback and testing from diverse user groups.</p> <p>That said, a few things can be set to try and automatically detect as much issue as possible. If your app is a web-view, this will be very easy and convenient. You can go to the \ud83d\udd27 Assistive technologies : Desktop module for more information.</p> <p>If you app is native, you can set-up your CI to detect missing accessibility labels on focusable elements and setup a test that navigate through all of the elements of a view using the keyboard, checking that none of them wasn\u2019t reached.</p> <p>Some frameworks (including SwiftUI and Jetpack Compose) provide ways of automating UI tests that check accessibility.</p> <p>You can also use a template of a checklist containing the main elements to be sounded and share it with your team. We provide you, our own accessibility checklist template. Feel free to iterate upon it and to propose your enhancements in this repository.</p> <p>Remember: this should not be seen as a way to make your UI accessible, but rather to be sure you commit won't break any existing accessibility that was implemented. For new features, it is essential to design the UI with accessibility in mind from the very start.</p> <p></p> <p>The diagram in text format:</p> <p>Did you change/create a UI component?</p> <ul> <li>If no: skip to the question about data manipulation</li> </ul> <p>Can you access it in a practical way with your keyboard or VoiceOver/TalkBack alone?</p> <ul> <li>If no: Fix it! All elements should be accessible without a mouse. Most users would expect the navigation to take place using TAB and BACKTAB. Arrows are also useful inside of lists. A top bar would typically be accessible with ALT. Shortcuts can make this navigation smoother.</li> </ul> <p>Are all information and labels properly transcribed using a screen reader?</p> <ul> <li>If no: Fix it! You can test this using your system screen reader on the settings or NVDA on Windows. You can then navigate through the app and hear if the labels are relevant. All information like the state of a component or wether it's selected must be transcribed. Expect to provide in your code:<ul> <li>A name for the element</li> <li>A description of its effect</li> <li>its role (for example static text or button)</li> </ul> </li> </ul> <p>Does it work with different text scaling?</p> <ul> <li>If no: Fix it! Most operating systems have text scaling options.  Some apps have their own too. Check if your UI isn't cropped by changing the size of the font. Try it for smaller and for bigger text.</li> </ul> <p>Did you affect another component?</p> <ul> <li>If yes: repeat the previous questions for the other component</li> </ul> <p>Is the data manipulated in your code easily accessible from UI components?</p> <ul> <li>If no: Make functions in  your API that allow  UI components to access relevant information. For example, the time of a message is often in a separated component from the message itself but the accessibility label of this message could need access to the date where it was sent.</li> </ul> <p>Does it work well for all languages? (including non UTF8 and RTL ones )?</p> <ul> <li>If no: Fix it! Some languages like Greek are often not encoded in UTF8. Be sure to account for them. Also check that RTL (right to left) languages like Arabic displays correctly. To test this, you can use parts of local newspapers as placeholders!</li> </ul> <p>Does it has elements showing cultural significance?</p> <ul> <li>If no: You are good to go!</li> <li> <p>If yes: Does it enable people from various cultural background to feel represented?</p> <ul> <li> <p>If you for no: Fix it! For example, a picture of a cheeseburger or a pizza as an illustration for food will only enable a certain demographic of users to feel represented. Having separate field for first and last name will not allow users from certain cultures to use the app properly. The only way to try and make our application more inclusive is to show it to people from varied background ans ask them about their needs to use it properly.</p> </li> <li> <p>If you hope yes: You are good to go!</p> </li> </ul> </li> </ul>"},{"location":"D-ICO/#accessible-apis-back-end","title":"Accessible API\u2019s &amp; back-end","text":"<p>On the back-end too, accessible code is good code. A well-designed architecture or API will be more understandable for everyone to understand and iterate on, particularly for open source software.</p> <p>Here are some key elements to making your API accessible:</p> <ul> <li>When choosing a name for some object, make sure to apply those principles:<ul> <li>Avoid abbreviations, which can be difficult to understand to some people due to language, screen reader use, or cognitive disabilities.</li> <li>Make sure the name is as clear and complete as possible.</li> </ul> </li> <li>Regarding documentation and code commenting, remember to:<ul> <li>Write clear sentences with simple language that will enable everyone to understand the purpose of your code.</li> <li>If your documentation is built to HTML, check with the WAVE tool that it is WCAG-compliant.</li> </ul> </li> </ul>"},{"location":"D-ICO/#conclusion","title":"Conclusion","text":"<p>Accessible programming can be overwhelming, mostly due to the lack of resources for native apps, but with the right tools it\u2019s absolutely bearable. Remember that accessibility issues in your code often hide underlying issues. Also remember to set up proper workflows and tests.</p> <p>From here, you might want to take a look at some of our modules about inclusive programming for different platforms, ecosystems and frameworks.</p>"},{"location":"D-ICO/#resources","title":"Resources","text":"<p>QuickInclusivenessCheck.excalidraw</p> <p>WAVE Accessibility tool</p>"},{"location":"D-ICO/#sources","title":"Sources","text":"<p>Barrell Dylan. Agile Accessibility Handbook</p>"},{"location":"D-IWP/","title":"\ud83d\udd78\ufe0f Inclusive Web programming","text":"<p>In this module</p> <p>This module provides basic information for starting to work on accessibility and inclusiveness for your website or webapp.</p> <p>\u26f3\ufe0f Section: D. Programming inclusive and accessible software</p> <p>\ud83d\udc65 Audience: Web developers and product teams</p> <p>\u23f1\ufe0f \ufe0fDuration: 10'</p> <p>\ud83d\udcda Prerequisites: \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101</p>"},{"location":"D-IWP/#when-to-use","title":"When to use?","text":"<p>Go through this module if you work in web front-end development or with a web-based framework. Please note that this module requires the trainees to follow \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101 first.</p>"},{"location":"D-IWP/#disclaimer","title":"Disclaimer","text":"<p>We -the original authors- are not web developers ourselves. Providing web programming guidelines is not the main goal of this project, but we figured it could be helpful for some organizations (at least it was for ours). Additionally, as we mentioned earlier, there already exist plenty of great resources for web accessibility. Therefore, this section will mostly be a hall of very useful content we found on the topic. If you have experience with web accessibility, please feel free to contribute to share your expertise!</p>"},{"location":"D-IWP/#useful-references","title":"Useful references","text":"<p>We selected a few resources that are particularly useful to get started on web accessibility and inclusiveness.</p>"},{"location":"D-IWP/#the-wcag-guidelines","title":"The WCAG guidelines","text":"<p>We mentioned the WCAG guidelines multiple times through the training. These are the international guidelines for web accessibility, and it should also be yours. We especially recommend using the How to Meet WCAG (Quick Reference) from the Web Accessibility Initiative.</p>"},{"location":"D-IWP/#the-inclusive-components-project","title":"The Inclusive Components project","text":"<p>The Inclusive Components blog and pattern library should be one of your privileged resource going forward with web accessibility. It provides articles, documentation and code snippets for making elements such as collapsible sections, tooltips, toggle buttons, etc. inclusive. It's truly an enormous and immensely helpful work.</p> <p></p>"},{"location":"D-IWP/#mozillas-accessibility-documentation","title":"Mozilla's accessibility documentation","text":"<p>When it comes to essentials of web development, Mozilla always has a resource. Accessibility is not an exception! Their very extensive and beginner-friendly reference is a great starting point.</p>"},{"location":"D-IWP/#keyboard-usage","title":"Keyboard usage","text":""},{"location":"D-IWP/#navigation","title":"Navigation","text":"<p>Navigation inside a web page or a webapp is often not trivial to design. This article cover the basics of html and CSS accessible programming.</p> <p>You can watch this video to get a sense of how to test your website with a screen reader and keyboard navigation.</p>"},{"location":"D-IWP/#skip-to-content","title":"Skip to content","text":"<p>Most websites should include a \"Skip to main content\". This allows users to navigate directly to the content of a page without going through all of the menus, situated at the top of almost every single page they navigate.</p> <p></p>"},{"location":"D-IWP/#heading-hierarchy","title":"Heading hierarchy","text":"<p>This one is easy. When navigating a web page, screen readers and other assistive technologies will generate a table of content for the user using the headings.</p> <p>Tip</p> <p>Therefore, breaking the hierarchy of headings, for example by skipping from a heading 2 to a heading 4 will probably break the navigation of your webpage for assistive technologies.</p>"},{"location":"D-IWP/#menus","title":"Menus","text":"<p>Designing and implementing usable and accessible menus is a requirement to making great web interfaces. This very extensive documentation provides insightful guidelines and code snippets to implement your menus in an accessible way. You may also use this article.</p>"},{"location":"D-IWP/#javascript","title":"JavaScript","text":"<p>A Guide To Keyboard Accessibility: JavaScript is article that provides detailed insights and code snippets about accessibility programming using JavaScript.</p>"},{"location":"D-IWP/#testing-tools","title":"Testing tools","text":""},{"location":"D-IWP/#wave","title":"Wave","text":"<p>We already covered Wave in the \ud83d\udd27 Assistive technologies : Desktop module. Wave is a testing software built to automatically detect warnings and errors related to the WCAG Accessibility guidelines. It\u2019s as simple as entering your domain to see prevalent issues with your website.</p> <p>Tip</p> <p>We recommend using Wave's browser extension that allows to run audits faster and locally, which is particularly useful for developing.</p> <p>While you might be working on a native app, it\u2019s very likely that you or your organization have a website along with it. Wave is a very convenient way of checking if you\u2019re also up-to-date on that end without needing further knowledge.</p> <p></p> <p>Still be careful not to believe blindly the feedback form automated tools lke Wave. It will often make mistakes and is not a substitute to human expertise.</p>"},{"location":"D-IWP/#lighthouse","title":"Lighthouse","text":"<p>Lighthouse is a web accessibility testing software developed by Microsoft and integrated in Microsoft Edge. It works quite similarly to wave. You can check Microsoft's documentation on how to use it.</p>"},{"location":"D-IWP/#axe","title":"Axe","text":"<p>Axe is one of the most used web accessibility tool with over two billion downloads. It's developed and maintained by Deque which are behind the accessibility of some of the biggest companies worldwide. Its feedback is very comprehensible, providing insights on how to fix specific issues and even providing information about \"Best Practices\".</p> <p></p>"},{"location":"D-IWP/#resources","title":"(Re)sources","text":"<p>W3C. How to Meet WCAG (Quick Reference)</p> <p>inclusive-components.design. Inclusive components project</p> <p>Cristian D\u00edaz. A Guide To Keyboard Accessibility: HTML And CSS (Part 1)</p> <p>ExpandTheRoom. How to Check Web Accessibility with a Screen Reader and Keyboard</p> <p>Heydon Pickering. Building Accessible Menu Systems</p> <p>inclusive-components.design. Menus &amp; Menu Buttons</p> <p>Cristian D\u00edaz. A Guide To Keyboard Accessibility: JavaScript (Part 2)</p> <p>W3C. WCAG 2 Overview</p> <p>Microsoft. Test accessibility using Lighthouse</p> <p>Wave</p> <p>Lighthouse</p> <p>Axe</p>"},{"location":"D-JFX/","title":"\u2615\ufe0f Inclusive programming with JavaFX","text":"<p>In this module</p> <p>This module provides basic information and resources for accessibility with Java Fx.</p> <p>\u26f3\ufe0f Section: D. Programming inclusive and accessible software</p> <p>\ud83d\udc65 Audience: JavaFX developers</p> <p>\u23f1\ufe0f \ufe0fDuration: 10'</p> <p>\ud83d\udcda Prerequisites: \ud83d\udc69\u200d\ud83d\udcbb Inclusive code 101</p> <p>Info</p> <p>As we are not Java developers and didn't get the chance to dive deep into JavaFX accessibility as of the time of writing, this module's content could be significantly improved. For now, this page will mainly redirect to useful resources we found along with some key takeaways. If you have experience with JavaFX accessibility and you feel like helping the project, please contribute.</p>"},{"location":"D-JFX/#javafxs-accessibility-api","title":"JavaFX's accessibility API","text":"<p>It has been approximately a decade that JavaFX have launched their full accessibility API. Nevertheless, when implementing accessibility using this framework, the first challenge you'll encounter will be to find documentation. While all the classes and methods are fully documented on Oracle's official API, there is no clear documentation page stating clearly what are the available accessibility features. Through this module, we'll cover some common accessibility needs and their JavaFX implementation.</p>"},{"location":"D-JFX/#understanding-basic-properties","title":"Understanding basic properties","text":"<p>Each JavaFX Node on your scenes have accessibility attributes which you can set to achieve the desired result.</p> <ul> <li>The <code>accessibleRole</code> gives information to assistive technologies so they can behave accordingly. There are many roles possible from which you can choose for example <code>BUTTON</code>.</li> <li>The <code>accessibleRoleDescription</code> can be used to override <code>accessibleRole</code>'s textual representation, which is read by the screen reader. This is useful, for example, if you have an element with the role <code>Button</code> that you would like the screen reader to call \"biscuit dispenser\".</li> <li>The <code>accessibleText</code> should describe the content of the Node. For our example, the accessible text could read \"3 biscuits left\". For some scenarios like for buttons, it might not be necessary to set it as labels will automatically be read out loud by screen readers if linked accordingly.</li> <li>The <code>accessibleHelp</code> should be used to give contextual hints to help users understand where they are or what are the possible interactions with an element. For our previous example, this could read \"dispenses a biscuit when activated\".</li> <li>The <code>labelFor</code> property is used to link a label to an input (like a text field or a slider). This is not to be confused with an accessibility label as called in many other frameworks - the equivalent is <code>accessibleText</code> in JavaFX. It could for example be a (visual) label saying \"edit the biscuit dispenser's name\" next to an associated text field.</li> </ul> <p>Each of theses properties can be retrieved or set using getAccessible{Property}(), setAccessible{Property}(AccessibleRole).</p>"},{"location":"D-JFX/#notifying-assistive-technologies-about-changes","title":"Notifying assistive technologies about changes","text":"<p>By default, changes on elements might not be notified. To make sure they are, you can use the <code>notifyAccessibleAttributeChanged(AccessibleAttribute attributes)</code>. As explained in Jonathan Giles' presentation of the JavaFX accessibility API for Oracle, the method can for example be called in an override of the <code>invalidated()</code> Node's method.</p>"},{"location":"D-JFX/#checking-if-an-assistive-technology-is-running","title":"Checking if an assistive technology is running","text":"<p>To adapt your app conditionally, depending on whether an assistive technology is running, you can use Platform's <code>accessibilityActiveProperty</code>.</p>"},{"location":"D-JFX/#making-an-element-focusable","title":"Making an element focusable","text":"<p>By default, some elements you provide in your UI might not be focusable. When relevant, to allow screen reader and keyboard users to focus an element, you use the <code>setFocusTraversable(boolean value)</code> property. Additionally, you can programmatically request input focus with <code>requestFocus()</code>.</p> <p>To adjust the order of traversal of elements, you can sort them accordingly in the parent panel of the scene builder.</p>"},{"location":"D-JFX/#customizing-accessibility-actions-behavior","title":"Customizing accessibility actions behavior","text":"<p>By overriding the <code>executeAccessibleAction</code> method, it is possible to execute custom behaviors when the user triggers an action like <code>FIRE</code> or <code>EXPAND</code> using a screen reader. More rarely, this method can also be useful to execute accessibility actions programmatically on behalf of the user.</p>"},{"location":"D-JFX/#providing-dynamic-accessibility-properties","title":"Providing dynamic accessibility properties","text":"<p>One way of providing dynamic accessibility properties is by overriding the <code>queryAccessibleAttribute</code> method and providing custom computed values for some cases of the enum, and calling the super by default.</p>"},{"location":"D-JFX/#resources","title":"Resources","text":"<p>Oracle's official JavaFX API</p> <p>Jonathan Giles (Oracle), The JavaFX Accessibility API (slides)</p>"},{"location":"E-CBU/","title":"\ud83c\udfaf Conclusion, bibliography and useful resources","text":"<p>In this module</p> <p>This module concludes the training by giving its key takeaways and linking them together, as well as recapitulating our bibliography, including resources that infused our work even if they were not explicitly cited.</p> <p>\u26f3\ufe0f Section: E. To conclude and go further</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 10'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"E-CBU/#when-to-use","title":"When to use?","text":"<p>This module should be used as a synthesis of the main points of this training as well as a comprehensive list of resources for you to go further than what we covered here.</p>"},{"location":"E-CBU/#what-to-take-away-from-this-training","title":"What to take away from this training?","text":"<p>This section is a reorganized synthesis of the whole training.</p>"},{"location":"E-CBU/#what-is-accessibility","title":"What is accessibility?","text":"<p>Accessibility is about designing and building for people who experience disabilities. - From a product standpoint, it's about ensuring everything you build can be used by anyone, no matter their physical or cognitive abilities. - From a legal standpoint, it is an obligation in many countries, guaranteeing an equal right to autonomy and participation of all. - From a software standpoint, digital accessibility comes down to making apps optimally perceivable, operable and understandable to people who live with disabilities. - From a political standpoint, accessibility is striving fight back against the structural tendency to exclusion of disabled people and attempting to provide them with a place (virtual or not) where they feel at ease and free to express themselves.</p> <p>When products are not built with accessibility in mind, they end up excluding many people, denying them access to places, tools or even communication. This unfair exclusion is called ableism.</p>"},{"location":"E-CBU/#accessibility-calls-for-inclusiveness","title":"Accessibility calls for inclusiveness","text":"<p>Inclusiveness is a core concept when talking about diversity. It's often a preferred term to accessibility, that is rather limited to the inclusion of people with disabilities. It highlights that we need to be designing and programming not only for people who experience disabilities, but also for the ever-varying pluralities of human experiences and discriminations emerging from them. In simpler words, focusing only on accessibility will result in the exclusion of the vas majority of users enduring oppressions.</p> <p>Here is a non-exhaustive list of human characteristics to keep in mind in order to try and include as many user as possible:</p> <ul> <li>Age</li> <li>Culture</li> <li>Digital literacy</li> <li>Education</li> <li>Ethnicity</li> <li>Gender, gender identity</li> <li>Historical context</li> <li>Language</li> <li>Mental health</li> <li>Nationality</li> <li>Physical and cognitive (dis)abilities</li> <li>Sexuality</li> <li>Socio-economic context</li> </ul> <p>Intersectionality is a framework for understanding specific living experiences of people situated at the intersection of discriminations and privileges. It\u2019s very useful, for two main reasons:</p> <ul> <li> <p>The proportion of users with disabilities who happen to have more than one is important (17.7% in 2016). Thinking about designing for one disability leaves out a blank spot for users having that disability but also other conditions. For example, deaf users with low vision are often overlooked when thinking about accessibility.</p> </li> <li> <p>It\u2019s a common bias to forget that disabled people are not just disabled, but first and foremost people with their own unique life experiences and specificities. We need to think about women who rely on wheelchairs, LGBTQIA+ people who don't speak the language of they country they live in, blind users who can't afford an iPhone - and those who are all of that at once!</p> </li> </ul> <p>Tip</p> <p>It's crucial to not think disabled peoples as a minority but rather as the living diversity in which we all evolve.</p>"},{"location":"E-CBU/#accessibility-and-inclusiveness-need-to-be-intentional","title":"Accessibility and inclusiveness need to be intentional","text":"<p>Disability shouldn't be thought as an individual characteristic. Environment - and the way it is designed - plays an equal role as the body when it comes to disability. For example, in an environment built to be completely flat and non-obstructed, people who walk are way slower than people using a wheelchair.</p> <p>Rob Whitaker, Developing Inclusive Mobile Apps</p> <p>Disability is not a binary state. We all have \"abilities and limits to those abilities. Disability happens when we have built something that doesn\u2019t work for someone with particular skills.</p> <p>Additionally, by default, we naturally tend to design, program and test for people like us or the people we spend time with. Not thinking about accessibility is a privilege because most disabled people don't have the choice to think about it. Not developing with accessibility and inclusiveness in mind will reinforce biases against minorities in software.</p> <p>Accessibility and inclusiveness are very hard to automate. No amount of checklists and tests in CI can replace feedback and testing from diverse user groups. Instead of listening blindly to automated tools, we encourage developing your empathetic gaze and listening to diverse feedback.</p> <p>Tip</p> <p>Accessibility and inclusiveness are a shift in how you perceive and take into account otherness through your building processes, not a task to be done.</p>"},{"location":"E-CBU/#disabled-people-are-the-real-experts-on-accessibility","title":"Disabled people are the real experts on accessibility","text":"<p>We cannot replace the perspectives of people with disabilities simply by reading about them or running a series of automated tests. We highly encourage recruiting people from diverse backgrounds in your team. The whole project will benefit from varying perspectives and it could help to leverage against systemic exclusion and hiring discriminations which affect minorities.</p> <p>Ashley Shew, Against Technoableism, Rethinking Who Needs Improvement</p> <p>Disabled people are \u201cthe real experts\u201d (the title of Michelle Sutton\u2019s 2015 edited volume about and authored by autistic people) when it comes to technology and disability. We use technologies. We also reject them, grapple with them, or repurpose them. The views on technology we get from listening to disabled people often look very different from those of people educated in the medical and \u201chelping\u201d professions.</p> <p>As we need to embrace diversity, it is crucial to fight a natural urge of all software creators: the will to personally find, design, and implement the solution to every problem. There is no one solution, and if there were, you would probably not be the one to find it. Your role as a software builder is to reach out to the real accessibility experts: those who rely on accessibility and experience its flaws every day, i.e. people with disabilities. Therefore, rather than trying to produce a \"perfectly accessible\" and inclusive product, we would rather suggest to try and make the main features as inclusive as possible and then get feedback from diverse users on what are their main issues with your software are.</p> <p>This does not mean either that your expertise is useless if you are not experiencing the discriminations for which you are assessing your products. As you know the product you are building and what experience you are aiming for, you - as a product engineer, designer, or even developer - will be necessary to understanding what can be enhanced.</p> <p>Tip</p> <p>We encourage following this motto: \"nothing about them without them\"</p>"},{"location":"E-CBU/#there-isnt-one-accessible-and-inclusive-design","title":"There isn't one \"accessible and inclusive design\"","text":"<p>While implementation plays an important role in the inclusiveness, and especially the accessibility of applications, the designers and product managers hold an important responsibility in the process of building an experience that will resonate and be welcoming to the widest range of users possible.</p> <p>Product design documents, including specifications, user stories and prototypes act as the team\u2019s compass for delivering products. That is why having inclusiveness in mind from the design is absolutely essential. You don\u2019t ever have to \u201cmake this feature accessible\u201d if it is built from the ground up with inclusiveness in mind.</p> <p>Moreover, human experiences are complex and evolving as they always emerge from intersections of those characteristics. Consequently, building an inclusive app is all about staying up to date and actively open to feedback, knowing that we can never reach perfect inclusiveness while doing our best to get there.</p> <p>Tip</p> <p>People are diverse, solutions to their needs too. Experiment, fail, get feedback, improve and nurture empathy!</p>"},{"location":"E-CBU/#accessible-code-is-good-code","title":"Accessible code is good code","text":"<p>Bad accessibility can often be a symptom of flawed code. Accessibility and inclusiveness in programming have one key benefit: making you think twice about your code. Stumbling into an accessibility issue might mean that you could be doing something better in a different way.</p> <p>You code can be good but will likely never be as robust as one iterated upon by a community of developers or a big company. Therefore, before implementing anything, check rigorously that your framework (or a library) doesn\u2019t provide a tool that would meet most of your needs.</p> <p>Tip</p> <p>Your code cannot be good without being accessible and if it's not accessible, it's probably hiding something more.</p>"},{"location":"E-CBU/#the-quick-inclusiveness-check","title":"The Quick Inclusiveness check","text":"<p>Before submitting a commit or reviewing it, you can also use a template of a checklist containing the main elements to be sounded and share it with your team. We provide you with our own accessibility checklist template. Feel free to iterate upon it and to contribute with your enhancements on this repository.</p> <p>Remember: this should not be seen as a way to make your UI accessible, but rather to be sure you commit won't break any existing accessibility that was implemented. For new features, it is essential to design the UI with accessibility in mind from the very start of the process.</p> <p></p> <p>You can modify it for your needs by downloading this file and opening it in excalidraw.</p>"},{"location":"E-CBU/#perspectives","title":"Perspectives","text":"<p>This training is already coming to a close. - If you are doing this training collectively, you are not quite yet finished as their is still two modules awaiting you. -</p> <p>We dearly hope it was somewhat useful to you. We feel that there is a lack of resources that dive deep into technical consideration while reflecting on them through a systemic gaze, and placing empathy as a core element of decision-making. We hope this training helps on your path to inclusiveness. As we said multiple time, we are not experts, only people trying to help. If you have expertise on those topics and feel like helping, please contribute. You can also star the repository. If you have any question, feel free to contact us!</p>"},{"location":"E-CBU/#bibliography-useful-resources","title":"Bibliography &amp; useful resources","text":"DesignPoliticsDesktopMobileWebAppDevelopment PipelineQt <p>Barrell Dylan. Agile Accessibility Handbook</p> <p>Qt. Qt's documentation of QAccessible Class</p> <p>Qt. Qt's documentation of QAccessible::Role</p> <p>Qt. Qt's documentation of KeyNavigation class</p> <p>Qt. Qt's documentation of QAccessibleInterface Class</p>"},{"location":"E-CBU/#tools","title":"Tools","text":"<p>Color Contrast Checker &amp; Accessibility Checker | Figma</p> <p>WillowTree. Contrast Plugin</p>"},{"location":"E-CBU/#articles-book-and-masterclasses","title":"Articles, book and masterclasses","text":"<p>Winner, Langdon. Do artifacts have politics?, 1980. Daedalus 109 (1): pp. 121--136.</p> <p>Apple Human Interface Guidelines: Accessibility</p> <p>Apple. Principles of Inclusive App Design</p> <p>Whitaker, Rob (2020). Developing Inclusive Mobile Apps: Building Accessible Apps for iOS and Android, Apress Berkley.</p> <p>Apple. The practice of inclusive design</p> <p>Apple. The process of inclusive design</p> <p>The A11Y Project. Software, books, blogs, online tools, etc.</p> <p>McRuer Robert. Crip Theory : Cultural Signs of Queerness and Disability, 1966</p> <p>Microsoft. Accessibility (Design basics)</p>"},{"location":"E-CBU/#foss-in-the-army","title":"FOSS in the army","text":"<p>U.S. Department of Defense. Use of Free and Open-source software (FOSS) in the U.S. Department of Defense, 2003</p> <p>U.S. Department of Defense. DoD Open Source Software FAQ</p> <p>Capt. Noe Lorona. Leveraging Free and Open-Source Software on the battlefield., 2024</p>"},{"location":"E-CBU/#foss-and-capitalism","title":"FOSS and capitalism","text":"<p>Teemu Mikkonen, Tere Vad\u00e9n, Niklas Vainio. Open source developers and the ethics of  capitalism, 2007</p> <p>B\u00f6hm Mirko, Economics of Open Source 2022</p> <p>Ross Daniel. The Place of Free and Open Source Software in the Social Apparatus of Accumulation, 2013 Josh Lerner, Parag A. Pathak, Jean Tirole. The Dynamics of Open-Source Contributors</p> <p>Manuel Hoffmann, Frank Nagle, Yanuo Zhou. The Value of Open Source Software</p>"},{"location":"E-CBU/#inclusion-in-software","title":"Inclusion in software","text":"<p>The Chartered Institute for IT, Nearly 90,000 disabled people are 'missing' from tech industry, says professional body. 2024</p> <p>Shew Ashley, Against Technoableism: rethinking who needs improvement. 2023</p> <p>Nathan L. Ensmenger. The computer boys take over, 2010</p> <p>Goodin Dan, \u201cMicrosoft has simply given us no other option,\u201d Signal says as it blocks Windows Recall 2025</p> <p>Sarah Gooding, Accessibility Advocates Sign Open Letter Urging People Not To Use AccesiBe and Other Overlay Products. 2021</p> <p>Blondy Marie Herminie L\u2019id\u00e9ologie libertaire des pionniers d\u2019internet : Contradictions d\u2019un humanisme industriel, 2025</p>"},{"location":"E-CBU/#open-source-desktop-app-with-good-accessibility","title":"Open source desktop app with good accessibility","text":"<p>BearWare. TeamTalk5</p> <p>Signal. Signal</p>"},{"location":"E-CBU/#tools_1","title":"Tools","text":"<p>NVDA. NVDA</p> <p>FreedomScientific. Jaws</p> <p>Apple. VoiceOver</p> <p>Microsoft. Accessibility Insights for Windows</p> <p>WebAIM. Wave</p> <p>Apple. Accessibility Inspector</p>"},{"location":"E-CBU/#articles-and-videos","title":"Articles and videos","text":"<p>Expand the room. Accessibility Testing Tools Overview</p> <p>Deque. NVDA Keyboard Shortcuts</p> <p>Challenge Solutions. Screen Reader Comparison</p> <p>VLE Guru Introduction to Keyboard Navigation and Accessibility</p> <p>Expand the room. How to Check Web Accessibility with a Screen Reader and Keyboard</p> <p>Chrome for Developers. *Screen Reader Basics: NVDA -- A11ycasts #09 *</p> <p>Andreea-QA. Accessibility Testing on Windows Apps, 2023.</p> <p>The A11Y Project. Software, books, blogs, online tools, etc.</p>"},{"location":"E-CBU/#documentation","title":"Documentation","text":"<p>Microsoft. Accessibility overview</p> <p>Microsoft. Accessibility (Design basics)</p> <p>Direction Interminist\u00e9rielle du Num\u00e9rique. RGAA-APPS : le guide officiel pour des applications accessibles</p> <p>Direction Interminist\u00e9rielle du Num\u00e9rique.Guide du concepteur RGAA 3</p> <p>Oracle's official JavaFX API</p> <p>Jonathan Giles (Oracle), The JavaFX Accessibility API (slides)</p>"},{"location":"E-CBU/#introduction-to-tools","title":"Introduction to tools","text":"<p>Apple. WWDC21 Challenge: VoiceOver Maze</p> <p>Senjam, S. S., Manna, S., &amp; Bascaran, C. Smartphones-Based Assistive Technology: Accessibility Features and Apps for People with Visual Impairment, and its Usage, Challenges, and Usability Testing, 2021</p>"},{"location":"E-CBU/#documentation_1","title":"Documentation","text":"<p>Direction Interminist\u00e9rielle du Num\u00e9rique. RGAA-APPS : le guide officiel pour des applications accessibles</p> <p>Direction Interminist\u00e9rielle du Num\u00e9rique.Guide du concepteur RGAA 3</p> <p>Direction Interminist\u00e9rielle du Num\u00e9rique.R\u00e9f\u00e9rentiel sp\u00e9cifique aux plateformes mobiles/tactiles</p> <p>Orange. Accessibility Guidelines</p> <p>Appt. A guide for making apps accessible</p> <p>Whitaker, Rob. Developing Inclusive Mobile Apps: Building Accessible Apps for iOS and Android</p>"},{"location":"E-CBU/#articles","title":"Articles","text":"<p>Brooke Nelson Alexander. 25 Smartphone Accessibility Settings You Need to Know About</p> <p>Senjam, S. S., Manna, S., &amp; Bascaran, C. Smartphones-Based Assistive Technology: Accessibility Features and Apps for People with Visual Impairment, and its Usage, Challenges, and Usability Testing, 2021.</p>"},{"location":"E-CBU/#apple","title":"Apple","text":"<p>CVS Health. Accessibility Annotation Kit for iOS</p>"},{"location":"E-CBU/#android","title":"Android","text":"<p>Android. Principles for improving app accessibility</p>"},{"location":"E-CBU/#articles_1","title":"Articles","text":"<p>W3C. How to Meet WCAG (Quick Reference)</p> <p>inclusive-components.design. Inclusive components project</p> <p>Cristian D\u00edaz. A Guide To Keyboard Accessibility: HTML And CSS (Part 1)</p> <p>ExpandTheRoom. How to Check Web Accessibility with a Screen Reader and Keyboard</p> <p>Heydon Pickering. Building Accessible Menu Systems</p> <p>inclusive-components.design. Menus &amp; Menu Buttons</p> <p>Cristian D\u00edaz. A Guide To Keyboard Accessibility: JavaScript (Part 2)</p> <p>W3C. WCAG 2 Overview</p> <p>Microsoft. Test accessibility using Lighthouse</p>"},{"location":"E-CBU/#testing-software","title":"Testing Software","text":"<p>Wave</p> <p>Lighthouse</p> <p>Axe</p>"},{"location":"E-CLS/","title":"\ud83d\udcac Collective sharing","text":"<p>In this module</p> <p>This module allows participants to reflect on what they learned, throughout the training and from others. Depending on the situation, it can come in various forms of different durations.</p> <p>\u26f3\ufe0f Section: E. To conclude and go further</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 20'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"E-CLS/#when-to-use","title":"When to use?","text":"<p>Use it at the end of the training as a way of concluding this journey. This is a key moment of the training, making the collective feel like they went through a journey together, and giving them the occasion to reflect on what they learned.</p>"},{"location":"E-CLS/#option-1-what-did-others-learn-2030min","title":"Option 1 : What did others learn ? (20/30min)","text":"<p>The participants (including the trainer) stand up and move randomly in the room until you give them the signal to stop. When you do, they partner up with the closest person. If you don\u2019t have enough space for that, you can simply draw random numbers (with each number written twice in the pool) and people team up with the person having the same. You could also make them pair with the person at their left and then at their right. They can then share with each other their answer to the following questions:</p> <ol> <li>What would be one thing that you learned?</li> <li>What would be one thing that you felt?</li> <li>What would be one thing that will change in your work?</li> </ol> <p>Repeat this up to 4 times and then get the participants back in circle. Each one can then share something that someone told them during the exercise, without naming who.</p> <p>For example, a sentence could be: \u201cSomeone told me they felt ashamed of knowing so little about accessibility, but eager to try their best to get the app to be more accessible.\u201d</p>"},{"location":"E-CLS/#option-2-together-on-a-boat-1015min","title":"Option 2: Together on a boat (10/15min)","text":"<p>This version has significantly less collective building effect than the first variation but works well as an alternative when you are behind schedule or in a context where people cannot move in the room (for example in a video-conference context).</p> <p>Each participant (including the trainer) gets a copy of the boat drawing found in the resources. Then, everybody takes turn explaining which character they felt like at the beginning of the formation, and which one they feel like now. This is the occasion for every participant to reflect on how this experience affected themselves and others around!</p>"},{"location":"E-CLS/#resources","title":"Resources","text":"<p>For the second option, you can use this illustration of Mathilde Riou and Vincent Chaillou:</p> <p></p> <p>If one or many trainees are blind or have low vision, you can use this alternative list of characters on the ship:</p> <ul> <li>Balloon Lookout</li> <li>Shy Observer</li> <li>Fast Climber</li> <li>Rope Acrobat</li> <li>Lazy Sleeper</li> <li>Ship Leader</li> <li>Tired Crawler</li> <li>Group Chatters</li> <li>Confused Floater</li> <li>Energetic Swimmer</li> <li>Happy Musician</li> <li>Careful Listener</li> <li>Daydreamer</li> </ul>"},{"location":"E-WYG/","title":"\ud83c\udfc3\ud83c\udffd\u200d\u2640\ufe0f\u200d\u27a1\ufe0f Where YOU go next!","text":"<p>In this module</p> <p>This module is a small workshop reflecting on what to do next to make the team's app more accessible. It is useful to get the ball rolling in the trained team.</p> <p>\u26f3\ufe0f Section: E. To conclude and go further</p> <p>\ud83d\udc65 Audience: Everyone</p> <p>\u23f1\ufe0f \ufe0fDuration: 15'</p> <p>\ud83d\udcda Prerequisites: None</p>"},{"location":"E-WYG/#when-to-use","title":"When to use?","text":"<p>This is the penultimate module of this formation on inclusive design and programming. It creates the space for the trained team(s) to think about the ways they can make their app more inclusive.</p>"},{"location":"E-WYG/#workshop","title":"Workshop","text":"<p>Create different groups based on the platforms people are working on and/or if they are rather on the side of product management, development, design or something else - any criteria works best for the trained organization or team.</p> <p>Each group starts by listing the obvious inclusiveness flaws in their field, how they can address them, and the ways they can discover more. Then, each group can choose or elect someone to open the issues for each platform right after the meeting.</p> <p>This person will be the \u201cinclusiveness coach\u201d of their group for the following weeks. That doesn\u2019t mean that they will fix those issues themselves but rather that they will keep track of the updates on the topic, for example by following up with developers to see how the implementation of those features are going.</p> <p>Once every group has finished this process, they are given the opportunity to explain briefly to the others what there inclusiveness roadmap will be and who is the \u201ccoach\u201d in their group. This will help communication between teams as other employees will know who to refer to talk about inclusiveness.</p>"}]}